[
    {
        "id": "700c49c23ddc27cc",
        "type": "subflow",
        "name": "DbObjectTypeChecker",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 220,
                "wires": [
                    {
                        "id": "d14273e6f6d3fd41"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 620,
                "y": 100,
                "wires": [
                    {
                        "id": "d14273e6f6d3fd41",
                        "port": 0
                    },
                    {
                        "id": "d14273e6f6d3fd41",
                        "port": 1
                    },
                    {
                        "id": "d14273e6f6d3fd41",
                        "port": 2
                    },
                    {
                        "id": "d14273e6f6d3fd41",
                        "port": 3
                    }
                ]
            },
            {
                "x": 620,
                "y": 220,
                "wires": [
                    {
                        "id": "d14273e6f6d3fd41",
                        "port": 4
                    },
                    {
                        "id": "d14273e6f6d3fd41",
                        "port": 5
                    }
                ]
            },
            {
                "x": 620,
                "y": 320,
                "wires": [
                    {
                        "id": "d14273e6f6d3fd41",
                        "port": 6
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "d14273e6f6d3fd41",
        "type": "switch",
        "z": "700c49c23ddc27cc",
        "name": "CheckForDbObjectType",
        "property": "dbObjectType",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "table",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "view",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "function",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "strp",
                "vt": "str"
            },
            {
                "t": "empty"
            },
            {
                "t": "istype",
                "v": "undefined",
                "vt": "undefined"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 7,
        "x": 370,
        "y": 220,
        "wires": [
            [],
            [],
            [],
            [],
            [],
            [],
            []
        ]
    },
    {
        "id": "287ac9c7227a8a26",
        "type": "subflow",
        "name": "DbProviderChecker",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 240,
                "wires": [
                    {
                        "id": "c28959cd48553017"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 480,
                "y": 200,
                "wires": [
                    {
                        "id": "c28959cd48553017",
                        "port": 0
                    },
                    {
                        "id": "c28959cd48553017",
                        "port": 1
                    }
                ]
            },
            {
                "x": 480,
                "y": 260,
                "wires": [
                    {
                        "id": "c28959cd48553017",
                        "port": 3
                    },
                    {
                        "id": "c28959cd48553017",
                        "port": 2
                    }
                ]
            },
            {
                "x": 480,
                "y": 320,
                "wires": [
                    {
                        "id": "c28959cd48553017",
                        "port": 4
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "c28959cd48553017",
        "type": "switch",
        "z": "287ac9c7227a8a26",
        "name": "CheckForProvider",
        "property": "dbProvider",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "postgres",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "mssql",
                "vt": "str"
            },
            {
                "t": "empty"
            },
            {
                "t": "istype",
                "v": "undefined",
                "vt": "undefined"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 210,
        "y": 240,
        "wires": [
            [],
            [],
            [],
            [],
            []
        ]
    },
    {
        "id": "8366aaf082e3436f",
        "type": "subflow",
        "name": "ConnectionStringParser",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 280,
                "y": 260,
                "wires": [
                    {
                        "id": "4f03671861f54432"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1700,
                "y": 200,
                "wires": [
                    {
                        "id": "afcfb55e9f2c4ae5",
                        "port": 0
                    }
                ]
            },
            {
                "x": 1360,
                "y": 320,
                "wires": [
                    {
                        "id": "8096768f413b2cb8",
                        "port": 1
                    }
                ]
            },
            {
                "x": 780,
                "y": 400,
                "wires": [
                    {
                        "id": "4f03671861f54432",
                        "port": 1
                    },
                    {
                        "id": "4f03671861f54432",
                        "port": 2
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "18e00f17fb85b948",
        "type": "function",
        "z": "8366aaf082e3436f",
        "name": "ParseConnectionString",
        "func": "var connectionString = msg.payload.conn;\n\n// Get the array of pairs [\"Host=host\", ...]\nvar equations = connectionString.split(\";\");\n\nvar connectionKeys = [];\nvar connectionValues = [];\nvar expectedKeys = [\"Host\", \"Port\", \"User\", \"Pw\", \"Db\", \"Provider\"];\n\nfor (let i = 0; i < equations.length; i++){\n    var keyValueArray = equations[i].split(\"=\");\n    connectionKeys.push(keyValueArray[0]);\n    connectionValues.push(keyValueArray[1]);\n}\n\nvar correctKeys = Array.isArray(expectedKeys) &&\n        Array.isArray(connectionKeys) &&\n        expectedKeys.length === connectionKeys.length &&\n        expectedKeys.every((val, index) => val === connectionKeys[index]);\n        \nif (correctKeys){\n    msg.connKeysCorrect = true;\n    msg.connectionValues = connectionValues;\n} else {\n    msg.connKeysCorrect = false;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 260,
        "wires": [
            [
                "8096768f413b2cb8"
            ]
        ]
    },
    {
        "id": "8096768f413b2cb8",
        "type": "switch",
        "z": "8366aaf082e3436f",
        "name": "CheckForConnectionKeysCorrectness",
        "property": "connKeysCorrect",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1090,
        "y": 260,
        "wires": [
            [
                "afcfb55e9f2c4ae5"
            ],
            []
        ]
    },
    {
        "id": "afcfb55e9f2c4ae5",
        "type": "function",
        "z": "8366aaf082e3436f",
        "name": "ParseConnectionValues",
        "func": "if (msg.connectionValues.some(v => v == \"\" || v === undefined)){\n    msg.connValuesCorrect = false;\n} else{\n    msg.connValuesCorrect = true;\n}\n\nmsg.host = msg.connectionValues[0];\nmsg.port = msg.connectionValues[1];\nmsg.user = msg.connectionValues[2];\nmsg.pw = msg.connectionValues[3];\nmsg.database = msg.connectionValues[4];\nmsg.dbProvider = msg.connectionValues[5];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1450,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "4f03671861f54432",
        "type": "switch",
        "z": "8366aaf082e3436f",
        "name": "CheckForConnectionString",
        "property": "payload.conn",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            },
            {
                "t": "empty"
            },
            {
                "t": "istype",
                "v": "undefined",
                "vt": "undefined"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 480,
        "y": 260,
        "wires": [
            [
                "18e00f17fb85b948"
            ],
            [],
            []
        ]
    },
    {
        "id": "e1279361232147cb",
        "type": "tab",
        "label": "Config_Generator_Service",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "ab903d4724062cdd",
        "type": "http in",
        "z": "e1279361232147cb",
        "name": "",
        "url": "/get-rest-config",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 920,
        "wires": [
            [
                "75c3b94719638629"
            ]
        ]
    },
    {
        "id": "3322420c05a5b2aa",
        "type": "comment",
        "z": "e1279361232147cb",
        "name": "{\"conn\":\"Host=host;Port=port;User=user;Pw=pw;Db=db;Provider=[mssql | postgres]\", \"dbObjectType\":\"dbobjecttype\",\"apiName\": \"nameoftheapi\", \"dbObjectInformation\":{...}}",
        "info": "",
        "x": 620,
        "y": 600,
        "wires": []
    },
    {
        "id": "69865939e7a4179f",
        "type": "comment",
        "z": "e1279361232147cb",
        "name": "(For tables) \"dbObjectInformation\" : {\"name\": \"objectname\",\"schema\" : \"schema\",\"properties\": properties,\"pk\" : pk}",
        "info": "",
        "x": 440,
        "y": 640,
        "wires": []
    },
    {
        "id": "ef9a36277586873c",
        "type": "comment",
        "z": "e1279361232147cb",
        "name": "(For views) \"dbObjectInformation\" : {\"name\": \"objectname\",\"schema\" : \"schema\",\"properties\": properties,\"pk\" : pk}",
        "info": "",
        "x": 440,
        "y": 680,
        "wires": []
    },
    {
        "id": "00e19e363fbe0c5f",
        "type": "comment",
        "z": "e1279361232147cb",
        "name": "(For functions) \"dbObjectInformation\" : { \"name\": \"name\", \"schema\" : \"schema\"}",
        "info": "",
        "x": 330,
        "y": 720,
        "wires": []
    },
    {
        "id": "57ef89470449c95b",
        "type": "comment",
        "z": "e1279361232147cb",
        "name": "(For stored procedures) \"dbObjectInformation\" : { \"name\": \"name\", \"schema\" : \"schema\"}",
        "info": "",
        "x": 360,
        "y": 760,
        "wires": []
    },
    {
        "id": "9585f47609258e48",
        "type": "subflow:8366aaf082e3436f",
        "z": "e1279361232147cb",
        "name": "",
        "x": 1210,
        "y": 920,
        "wires": [
            [
                "7eb5df107b59a6b5"
            ],
            [
                "1aac0b8b7cd842e0"
            ],
            [
                "e7abad28ba52e498"
            ]
        ]
    },
    {
        "id": "e7abad28ba52e498",
        "type": "function",
        "z": "e1279361232147cb",
        "name": "CreateEmptyConnectionError",
        "func": "msg.payload = {\n    \"error\": \"The connection parameters were empty!\"\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 1180,
        "wires": [
            [
                "6a88d76f269759c6"
            ]
        ]
    },
    {
        "id": "6a88d76f269759c6",
        "type": "http response",
        "z": "e1279361232147cb",
        "name": "",
        "statusCode": "400",
        "headers": {},
        "x": 1850,
        "y": 1180,
        "wires": []
    },
    {
        "id": "1aac0b8b7cd842e0",
        "type": "function",
        "z": "e1279361232147cb",
        "name": "CreateWrongKeysError",
        "func": "msg.payload = {\n    \"error\": \"Incorrect connection parameters detected!\"\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 1120,
        "wires": [
            [
                "0206707b24b0a0be"
            ]
        ]
    },
    {
        "id": "0206707b24b0a0be",
        "type": "http response",
        "z": "e1279361232147cb",
        "name": "",
        "statusCode": "400",
        "headers": {},
        "x": 1840,
        "y": 1120,
        "wires": []
    },
    {
        "id": "32cc5068482ee600",
        "type": "function",
        "z": "e1279361232147cb",
        "name": "CreateWrongValuesError",
        "func": "msg.payload = {\n    \"error\": \"Incorrect or empty connection values detected!\"\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2010,
        "y": 1080,
        "wires": [
            [
                "a6c8442e23f2a354"
            ]
        ]
    },
    {
        "id": "7eb5df107b59a6b5",
        "type": "switch",
        "z": "e1279361232147cb",
        "name": "CheckForConnectionValuesCorrectness",
        "property": "connValuesCorrect",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1640,
        "y": 880,
        "wires": [
            [
                "d0264661ae60d157"
            ],
            [
                "32cc5068482ee600"
            ]
        ]
    },
    {
        "id": "75c3b94719638629",
        "type": "function",
        "z": "e1279361232147cb",
        "name": "StoreDbObjectTypeToMsg",
        "func": "msg.dbObjectType = msg.req.body.dbObjectType;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 920,
        "wires": [
            [
                "0371bab3169d349e"
            ]
        ]
    },
    {
        "id": "11bbb65df6de15ea",
        "type": "subflow:287ac9c7227a8a26",
        "z": "e1279361232147cb",
        "name": "",
        "x": 2510,
        "y": 700,
        "wires": [
            [
                "d5bbc57ae78cbb31"
            ],
            [
                "2c52d5dfa7b66805"
            ],
            [
                "61e3012b3f1f4b69"
            ]
        ]
    },
    {
        "id": "61e3012b3f1f4b69",
        "type": "function",
        "z": "e1279361232147cb",
        "name": "CreateUnsupportedProviderError",
        "func": "msg.payload = {\n    \"error\": \"The database provider is not supported!\"\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2920,
        "y": 1080,
        "wires": [
            [
                "503eb9fcb9f5967b"
            ]
        ]
    },
    {
        "id": "503eb9fcb9f5967b",
        "type": "http response",
        "z": "e1279361232147cb",
        "name": "",
        "statusCode": "400",
        "headers": {},
        "x": 3180,
        "y": 1080,
        "wires": []
    },
    {
        "id": "75d98da89051064e",
        "type": "switch",
        "z": "e1279361232147cb",
        "name": "SwitchDbObjectType",
        "property": "dbObjectType",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "table",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "view",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "function",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "strp",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 3200,
        "y": 680,
        "wires": [
            [
                "32da1979fc61e3fd"
            ],
            [
                "1b3f2f688bb5a88a"
            ],
            [
                "f64ed20a3200c253"
            ],
            [
                "a413fd1e49cae73c"
            ]
        ]
    },
    {
        "id": "e3554e31e8c5267b",
        "type": "function",
        "z": "e1279361232147cb",
        "name": "GenerateConfigForTable",
        "func": "var generator = global.get('generator');\n\nvar dbConfig = {\n    \"host\": msg.host,\n    \"port\": msg.port,\n    \"database\": msg.database,\n    \"user\": msg.user,\n    \"password\": msg.pw\n};\n\nvar tableData = {\n    \"name\": msg.dbObjectInformation.name,\n    \"schema\": msg.dbObjectInformation.schema,\n    \"properties\": msg.dbObjectInformation.properties,\n    \"pk\": msg.dbObjectInformation.pk[0]\n};\n\nvar apiName = msg.apiName;\nvar dbProvider = msg.dbProvider;\nvar config = generator.generate(tableData, \"table\", dbConfig, apiName, dbProvider);\nmsg.payload = config;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4030,
        "y": 340,
        "wires": [
            [
                "d0e7fdc77ee51548"
            ]
        ]
    },
    {
        "id": "bb908d857de854b7",
        "type": "function",
        "z": "e1279361232147cb",
        "name": "GenerateConfigForView",
        "func": "var generator = global.get('generator');\n\nvar dbConfig = {\n    \"host\": msg.host,\n    \"port\": msg.port,\n    \"database\": msg.database,\n    \"user\": msg.user,\n    \"password\": msg.pw\n};\n\nvar viewData = {\n    \"name\": msg.dbObjectInformation.name,\n    \"schema\": msg.dbObjectInformation.schema,\n    \"properties\": msg.dbObjectInformation.properties,\n    \"pk\": msg.dbObjectInformation.pk[0]\n};\n\nvar apiName = msg.apiName;\nvar dbProvider = msg.dbProvider;\nvar config = generator.generate(viewData, \"view\", dbConfig, apiName, dbProvider);\nmsg.payload = config;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4030,
        "y": 500,
        "wires": [
            [
                "eaef4c53d4ddcc56"
            ]
        ]
    },
    {
        "id": "599d8265512c14ce",
        "type": "function",
        "z": "e1279361232147cb",
        "name": "GenerateConfigForFunction",
        "func": "var generator = global.get('generator');\n\nvar dbConfig = {\n    \"host\": msg.host,\n    \"port\": msg.port,\n    \"database\": msg.database,\n    \"user\": msg.user,\n    \"password\": msg.pw\n};\n\nvar functionData = {\n    \"name\": msg.dbObjectInformation.name,\n    \"schema\": msg.dbObjectInformation.schema\n};\n\nvar apiName = msg.apiName;\nvar dbProvider = msg.dbProvider;\nvar config = generator.generate(functionData, \"function\", dbConfig, apiName, dbProvider);\nmsg.payload = config;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4020,
        "y": 680,
        "wires": [
            [
                "2542975f7cee3b57"
            ]
        ]
    },
    {
        "id": "35f16c9cb0d5a5e5",
        "type": "function",
        "z": "e1279361232147cb",
        "name": "GenerateConfigForStoredProcedure",
        "func": "var generator = global.get('generator');\n\nvar dbConfig = {\n    \"host\": msg.host,\n    \"port\": msg.port,\n    \"database\": msg.database,\n    \"user\": msg.user,\n    \"password\": msg.pw\n};\n\nvar storedProcedureData = {\n    \"name\": msg.dbObjectInformation.name,\n    \"schema\": msg.dbObjectInformation.schema\n};\n\n\nvar apiName = msg.apiName;\nvar dbProvider = msg.dbProvider;\nvar config = generator.generate(storedProcedureData, \"strp\", dbConfig, apiName, dbProvider);\nmsg.payload = config;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4030,
        "y": 840,
        "wires": [
            [
                "76abf44d1751f2b6"
            ]
        ]
    },
    {
        "id": "32da1979fc61e3fd",
        "type": "function",
        "z": "e1279361232147cb",
        "name": "CheckObjectInformation",
        "func": "if (msg.dbObjectInformation === undefined){\n    msg.error = \"The information about the database object was not defined!\";\n    return msg;\n}\n\nif (msg.dbObjectInformation.name === undefined){\n    msg.error = \"The name of the database object was not defined!\";\n    return msg;\n}\n\nif (msg.dbObjectInformation.schema === undefined){\n    msg.error = \"The schema of the database object was not defined!\";\n    return msg;\n}\n\nif (msg.dbObjectInformation.properties === undefined){\n    msg.error = \"The properties of the database object were not defined!\";\n    return msg;\n}\n\nif (msg.dbObjectInformation.properties.length > 0){\n    if (msg.dbObjectInformation.properties.some(p => p.propertyName == undefined)){\n        msg.error = \"Unknown property identifier recognized!\";\n        return msg;\n    }\n}\n\nif (msg.dbObjectInformation.pk === undefined){\n    msg.error = \"The primary key of the database object were not defined!\";\n    return msg;\n}\n\nif (msg.dbObjectInformation.pk.length != 1){\n    msg.error = \"Composite or no primary keys are currently not supported!\";\n    return msg;\n}\n\nif (msg.dbObjectInformation.pk.some(p => !msg.dbObjectInformation.properties.some(p1 => p1.propertyName == p))){\n    msg.error = \"Primary key not included in the attributes!\";\n    return msg;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3530,
        "y": 400,
        "wires": [
            [
                "2c438d46021a6c21"
            ]
        ]
    },
    {
        "id": "1b3f2f688bb5a88a",
        "type": "function",
        "z": "e1279361232147cb",
        "name": "CheckObjectInformation",
        "func": "if (msg.dbObjectInformation === undefined){\n    msg.error = \"The information about the database object was not defined!\";\n    return msg;\n}\n\nif (msg.dbObjectInformation.name === undefined){\n    msg.error = \"The name of the database object was not defined!\";\n    return msg;\n}\n\nif (msg.dbObjectInformation.schema === undefined){\n    msg.error = \"The schema of the database object was not defined!\";\n    return msg;\n}\n\nif (msg.dbObjectInformation.properties === undefined){\n    msg.error = \"The properties of the database object were not defined!\";\n    return msg;\n}\n\nif (msg.dbObjectInformation.properties.length > 0){\n    if (msg.dbObjectInformation.properties.some(p => p.propertyName == undefined)){\n        msg.error = \"Unknown property identifier recognized!\";\n        return msg;\n    }\n}\n\nif (msg.dbObjectInformation.pk === undefined){\n    msg.error = \"The primary key of the database object were not defined!\";\n    return msg;\n}\n\nif (msg.dbObjectInformation.pk.length != 1){\n    msg.error = \"Composite or no primary keys are currently not supported!\";\n    return msg;\n}\n\nif (msg.dbObjectInformation.pk.some(p => !msg.dbObjectInformation.properties.some(p1 => p1.propertyName == p))) {\n    msg.error = \"Primary key not included in the attributes!\";\n    return msg;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3530,
        "y": 540,
        "wires": [
            [
                "22697e46d4758c7b"
            ]
        ]
    },
    {
        "id": "f64ed20a3200c253",
        "type": "function",
        "z": "e1279361232147cb",
        "name": "CheckObjectInformation",
        "func": "if (msg.dbObjectInformation === undefined){\n    msg.error = \"The information about the database object was not defined!\";\n    return msg;\n}\n\nif (msg.dbObjectInformation.name === undefined){\n    msg.error = \"The name of the database object was not defined!\";\n    return msg;\n}\n\nif (msg.dbObjectInformation.schema === undefined){\n    msg.error = \"The schema of the database object was not defined!\";\n    return msg;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3530,
        "y": 740,
        "wires": [
            [
                "a8ccf0616b27fb95"
            ]
        ]
    },
    {
        "id": "a413fd1e49cae73c",
        "type": "function",
        "z": "e1279361232147cb",
        "name": "CheckObjectInformation",
        "func": "if (msg.dbObjectInformation === undefined){\n    msg.error = \"The information about the database object was not defined!\";\n    return msg;\n}\n\nif (msg.dbObjectInformation.name === undefined){\n    msg.error = \"The name of the database object was not defined!\";\n    return msg;\n}\n\nif (msg.dbObjectInformation.schema === undefined){\n    msg.error = \"The schema of the database object was not defined!\";\n    return msg;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3530,
        "y": 900,
        "wires": [
            [
                "54e545187f27995b"
            ]
        ]
    },
    {
        "id": "27682e8c80247121",
        "type": "comment",
        "z": "e1279361232147cb",
        "name": "This subflow catches the errors",
        "info": "",
        "x": 470,
        "y": 460,
        "wires": []
    },
    {
        "id": "903872e1d437c670",
        "type": "catch",
        "z": "e1279361232147cb",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 160,
        "y": 520,
        "wires": [
            [
                "6a823a14c360fec5"
            ]
        ]
    },
    {
        "id": "6a823a14c360fec5",
        "type": "function",
        "z": "e1279361232147cb",
        "name": "CreateError",
        "func": "// Store the error message \n// in the payload property.\nmsg.payload = {\n    \"error\": msg.error.message\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 520,
        "wires": [
            [
                "3b48444c8498e0a0"
            ]
        ]
    },
    {
        "id": "3b48444c8498e0a0",
        "type": "http response",
        "z": "e1279361232147cb",
        "name": "",
        "statusCode": 400,
        "headers": {},
        "x": 660,
        "y": 520,
        "wires": []
    },
    {
        "id": "d0e7fdc77ee51548",
        "type": "http response",
        "z": "e1279361232147cb",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 4280,
        "y": 340,
        "wires": []
    },
    {
        "id": "eaef4c53d4ddcc56",
        "type": "http response",
        "z": "e1279361232147cb",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 4280,
        "y": 500,
        "wires": []
    },
    {
        "id": "2542975f7cee3b57",
        "type": "http response",
        "z": "e1279361232147cb",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 4240,
        "y": 680,
        "wires": []
    },
    {
        "id": "76abf44d1751f2b6",
        "type": "http response",
        "z": "e1279361232147cb",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 4280,
        "y": 840,
        "wires": []
    },
    {
        "id": "2b741bed48a72d72",
        "type": "function",
        "z": "e1279361232147cb",
        "name": "StoreDbObjectInformationToMsg",
        "func": "msg.dbObjectInformation = msg.req.body.dbObjectInformation;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 920,
        "wires": [
            [
                "9585f47609258e48"
            ]
        ]
    },
    {
        "id": "0371bab3169d349e",
        "type": "function",
        "z": "e1279361232147cb",
        "name": "StoreApiNameToMsg",
        "func": "msg.apiName = msg.req.body.apiName;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 920,
        "wires": [
            [
                "2b741bed48a72d72"
            ]
        ]
    },
    {
        "id": "2c438d46021a6c21",
        "type": "switch",
        "z": "e1279361232147cb",
        "name": "CheckForErrors",
        "property": "error",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 3760,
        "y": 400,
        "wires": [
            [
                "e3554e31e8c5267b"
            ],
            [
                "0516fd34632972fe"
            ]
        ]
    },
    {
        "id": "0516fd34632972fe",
        "type": "function",
        "z": "e1279361232147cb",
        "name": "CreateError",
        "func": "msg.payload = {\n  \"error\": msg.error  \n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3990,
        "y": 440,
        "wires": [
            [
                "04054accd9e80bc1"
            ]
        ]
    },
    {
        "id": "04054accd9e80bc1",
        "type": "http response",
        "z": "e1279361232147cb",
        "name": "",
        "statusCode": "400",
        "headers": {},
        "x": 4220,
        "y": 440,
        "wires": []
    },
    {
        "id": "22697e46d4758c7b",
        "type": "switch",
        "z": "e1279361232147cb",
        "name": "CheckForErrors",
        "property": "error",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 3760,
        "y": 540,
        "wires": [
            [
                "bb908d857de854b7"
            ],
            [
                "1dce59cb49cc1c67"
            ]
        ]
    },
    {
        "id": "1dce59cb49cc1c67",
        "type": "function",
        "z": "e1279361232147cb",
        "name": "CreateError",
        "func": "msg.payload = {\n  \"error\": msg.error  \n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3990,
        "y": 600,
        "wires": [
            [
                "48da3d5b1102e876"
            ]
        ]
    },
    {
        "id": "48da3d5b1102e876",
        "type": "http response",
        "z": "e1279361232147cb",
        "name": "",
        "statusCode": "400",
        "headers": {},
        "x": 4220,
        "y": 600,
        "wires": []
    },
    {
        "id": "a6c8442e23f2a354",
        "type": "http response",
        "z": "e1279361232147cb",
        "name": "",
        "statusCode": "400",
        "headers": {},
        "x": 2220,
        "y": 1080,
        "wires": []
    },
    {
        "id": "a8ccf0616b27fb95",
        "type": "switch",
        "z": "e1279361232147cb",
        "name": "CheckForErrors",
        "property": "error",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 3760,
        "y": 740,
        "wires": [
            [
                "599d8265512c14ce"
            ],
            [
                "405647412b553059"
            ]
        ]
    },
    {
        "id": "405647412b553059",
        "type": "function",
        "z": "e1279361232147cb",
        "name": "CreateError",
        "func": "msg.payload = {\n  \"error\": msg.error  \n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3970,
        "y": 780,
        "wires": [
            [
                "c96dfc87036fa568"
            ]
        ]
    },
    {
        "id": "c96dfc87036fa568",
        "type": "http response",
        "z": "e1279361232147cb",
        "name": "",
        "statusCode": "400",
        "headers": {},
        "x": 4200,
        "y": 780,
        "wires": []
    },
    {
        "id": "54e545187f27995b",
        "type": "switch",
        "z": "e1279361232147cb",
        "name": "CheckForErrors",
        "property": "error",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 3760,
        "y": 900,
        "wires": [
            [
                "35f16c9cb0d5a5e5"
            ],
            [
                "6844bab23c04e603"
            ]
        ]
    },
    {
        "id": "6844bab23c04e603",
        "type": "function",
        "z": "e1279361232147cb",
        "name": "CreateError",
        "func": "msg.payload = {\n  \"error\": msg.error  \n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3950,
        "y": 940,
        "wires": [
            [
                "0b3f219d185017e0"
            ]
        ]
    },
    {
        "id": "0b3f219d185017e0",
        "type": "http response",
        "z": "e1279361232147cb",
        "name": "",
        "statusCode": "400",
        "headers": {},
        "x": 4180,
        "y": 940,
        "wires": []
    },
    {
        "id": "d5bbc57ae78cbb31",
        "type": "switch",
        "z": "e1279361232147cb",
        "name": "CheckApiName",
        "property": "apiName",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "empty"
            },
            {
                "t": "istype",
                "v": "undefined",
                "vt": "undefined"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 2760,
        "y": 700,
        "wires": [
            [
                "75d98da89051064e"
            ],
            [
                "f27095b19c2ad1c0"
            ],
            [
                "f27095b19c2ad1c0"
            ]
        ]
    },
    {
        "id": "f27095b19c2ad1c0",
        "type": "function",
        "z": "e1279361232147cb",
        "name": "CreateEmptyRestApiNameError",
        "func": "msg.payload = {\n    \"error\": \"The name of the REST-API was empty!\"\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3050,
        "y": 820,
        "wires": [
            [
                "30ae8f5f44ccc250"
            ]
        ]
    },
    {
        "id": "30ae8f5f44ccc250",
        "type": "http response",
        "z": "e1279361232147cb",
        "name": "",
        "statusCode": "400",
        "headers": {},
        "x": 3270,
        "y": 820,
        "wires": []
    },
    {
        "id": "d0264661ae60d157",
        "type": "subflow:700c49c23ddc27cc",
        "z": "e1279361232147cb",
        "name": "",
        "x": 2040,
        "y": 700,
        "wires": [
            [
                "11bbb65df6de15ea"
            ],
            [
                "1fdbdf4ede731aae"
            ],
            [
                "3b918298ed102e98"
            ]
        ]
    },
    {
        "id": "1fdbdf4ede731aae",
        "type": "function",
        "z": "e1279361232147cb",
        "name": "CreateEmptyDbObjectTypeError",
        "func": "msg.payload = {\n    \"error\": \"The database object type was empty!\"\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2370,
        "y": 880,
        "wires": [
            [
                "8bb2cac02f418827"
            ]
        ]
    },
    {
        "id": "3b918298ed102e98",
        "type": "function",
        "z": "e1279361232147cb",
        "name": "CreateWrongDbObjectTypeError",
        "func": "msg.payload = {\n    \"error\": \"An unknown database object type was detected!\"\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2350,
        "y": 960,
        "wires": [
            [
                "18368117d994e80b"
            ]
        ]
    },
    {
        "id": "8bb2cac02f418827",
        "type": "http response",
        "z": "e1279361232147cb",
        "name": "",
        "statusCode": "400",
        "headers": {},
        "x": 2580,
        "y": 880,
        "wires": []
    },
    {
        "id": "18368117d994e80b",
        "type": "http response",
        "z": "e1279361232147cb",
        "name": "",
        "statusCode": "400",
        "headers": {},
        "x": 2580,
        "y": 960,
        "wires": []
    },
    {
        "id": "2c52d5dfa7b66805",
        "type": "function",
        "z": "e1279361232147cb",
        "name": "CreateEmptyProviderError",
        "func": "msg.payload = {\n    \"error\": \"The database provider was empty!\"\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2900,
        "y": 900,
        "wires": [
            [
                "63109db1af7f61d8"
            ]
        ]
    },
    {
        "id": "63109db1af7f61d8",
        "type": "http response",
        "z": "e1279361232147cb",
        "name": "",
        "statusCode": "400",
        "headers": {},
        "x": 3180,
        "y": 900,
        "wires": []
    },
    {
        "id": "da198c038d9e3669",
        "type": "comment",
        "z": "e1279361232147cb",
        "name": "\"properties\" : [{\"propertyName\" : \"propertyname1\"}, {\"propertyName\" : \"propertyname2\"}, ...]",
        "info": "",
        "x": 370,
        "y": 800,
        "wires": []
    },
    {
        "id": "adfd8f02c08ce3f1",
        "type": "comment",
        "z": "e1279361232147cb",
        "name": "\"dbObjectType\" : \"table\" | \"view\" | \"function\" | \"strp\"",
        "info": "",
        "x": 250,
        "y": 840,
        "wires": []
    },
    {
        "id": "6a33034cb589ead9",
        "type": "comment",
        "z": "e1279361232147cb",
        "name": "\"pk\" : [\"pk1\", \"pk2\", ...]",
        "info": "",
        "x": 160,
        "y": 880,
        "wires": []
    }
]