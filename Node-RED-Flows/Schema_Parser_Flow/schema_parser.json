[
    {
        "id": "3a440fbe92149fc9",
        "type": "subflow",
        "name": "DatabaseConnectionChecker",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 220,
                "y": 220,
                "wires": [
                    {
                        "id": "84b6aaadbd6b0a9a"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1320,
                "y": 140,
                "wires": [
                    {
                        "id": "8788ab13af03556c",
                        "port": 0
                    }
                ]
            },
            {
                "x": 1320,
                "y": 220,
                "wires": [
                    {
                        "id": "8788ab13af03556c",
                        "port": 1
                    }
                ]
            },
            {
                "x": 580,
                "y": 300,
                "wires": [
                    {
                        "id": "84b6aaadbd6b0a9a",
                        "port": 2
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "84b6aaadbd6b0a9a",
        "type": "switch",
        "z": "3a440fbe92149fc9",
        "name": "SwitchDbProvider",
        "property": "dbProvider",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "postgres",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "mssql",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 410,
        "y": 220,
        "wires": [
            [
                "8ba8969569e20318"
            ],
            [
                "9b5e22a529b03912"
            ],
            []
        ]
    },
    {
        "id": "8ba8969569e20318",
        "type": "function",
        "z": "3a440fbe92149fc9",
        "name": "ConnectToPostgres",
        "func": "const pg = global.get('pg');\n\nconst testPgConnection = async () => {\n    const client = new pg.Client(msg.pgConfig);\n    try {\n        await client.connect();\n        console.log(\"Successfully connected to PostgreSQL database\");\n    } catch (err) {\n        console.error(\"Error connecting to PostgreSQL database\");\n        throw err;\n    } finally {\n        await client.end();\n    }\n};\n\ntestPgConnection()\n    .then(() => {\n        msg.connected = true;\n        node.send(msg)\n    }, (error) => {\n        msg.connected = false;\n        node.send(msg);\n    });",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 160,
        "wires": [
            [
                "8788ab13af03556c"
            ]
        ]
    },
    {
        "id": "9b5e22a529b03912",
        "type": "function",
        "z": "3a440fbe92149fc9",
        "name": "ConnectToMssql",
        "func": "const mssql = global.get('mssql');\n\nconst testMssqlConnection = async () => {\n    try {\n        await mssql.connect(msg.mssqlConfig);\n        console.log(\"Successfully connected to MSSQL database\");\n    } catch (err) {\n        console.error(\"Error connecting to MSSQL database\");\n        await mssql.close();\n        throw err;\n    } finally {\n        await mssql.close();\n    }\n};\n\ntestMssqlConnection()\n    .then(() => {\n        msg.connected = true;\n        node.send(msg)\n    }, (error) => {\n        msg.connected = false;\n        node.send(msg);\n    });",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 220,
        "wires": [
            [
                "8788ab13af03556c"
            ]
        ]
    },
    {
        "id": "8788ab13af03556c",
        "type": "switch",
        "z": "3a440fbe92149fc9",
        "name": "SwitchConnectionBoolean",
        "property": "connected",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1050,
        "y": 180,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "6ab50c85ca606a95",
        "type": "subflow",
        "name": "DbProviderConnectionStringParser",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 340,
                "wires": [
                    {
                        "id": "0b3622e260ca74cd"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1460,
                "y": 280,
                "wires": [
                    {
                        "id": "7441a81e33e3b0a9",
                        "port": 0
                    }
                ]
            },
            {
                "x": 1200,
                "y": 400,
                "wires": [
                    {
                        "id": "f159e6eb4ade31c3",
                        "port": 1
                    }
                ]
            },
            {
                "x": 580,
                "y": 440,
                "wires": [
                    {
                        "id": "0b3622e260ca74cd",
                        "port": 2
                    },
                    {
                        "id": "0b3622e260ca74cd",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "0b3622e260ca74cd",
        "type": "switch",
        "z": "6ab50c85ca606a95",
        "name": "CheckForConnectionString",
        "property": "payload.conn",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            },
            {
                "t": "empty"
            },
            {
                "t": "istype",
                "v": "undefined",
                "vt": "undefined"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 300,
        "y": 340,
        "wires": [
            [
                "f9a7eb3554cd81aa"
            ],
            [],
            []
        ]
    },
    {
        "id": "f9a7eb3554cd81aa",
        "type": "function",
        "z": "6ab50c85ca606a95",
        "name": "ParseConnectionString",
        "func": "var connectionString = msg.payload.conn;\n\n// Get the array of pairs [\"Host=host\", ...]\nvar equations = connectionString.split(\";\");\n\nvar connectionKeys = [];\nvar connectionValues = [];\nvar expectedKeys = [\"Host\", \"Port\", \"User\", \"Pw\", \"Db\"];\n\nfor (let i = 0; i < equations.length; i++){\n    var keyValueArray = equations[i].split(\"=\");\n    connectionKeys.push(keyValueArray[0]);\n    connectionValues.push(keyValueArray[1]);\n}\n\nvar correctKeys = Array.isArray(expectedKeys) &&\n        Array.isArray(connectionKeys) &&\n        expectedKeys.length === connectionKeys.length &&\n        expectedKeys.every((val, index) => val === connectionKeys[index]);\n        \nif (correctKeys){\n    msg.connKeysCorrect = true;\n    msg.connectionValues = connectionValues;\n} else {\n    msg.connKeysCorrect = false;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 340,
        "wires": [
            [
                "f159e6eb4ade31c3"
            ]
        ]
    },
    {
        "id": "f159e6eb4ade31c3",
        "type": "switch",
        "z": "6ab50c85ca606a95",
        "name": "CheckForConnectionKeysCorrectness",
        "property": "connKeysCorrect",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 910,
        "y": 340,
        "wires": [
            [
                "7441a81e33e3b0a9"
            ],
            []
        ]
    },
    {
        "id": "7441a81e33e3b0a9",
        "type": "function",
        "z": "6ab50c85ca606a95",
        "name": "ParseConnectionValues",
        "func": "if (msg.connectionValues.some(v => v == \"\" || v === undefined)){\n    msg.connValuesCorrect = false;\n} else{\n    msg.connValuesCorrect = true;\n}\n\nmsg.host = msg.connectionValues[0];\nmsg.port = msg.connectionValues[1];\nmsg.user = msg.connectionValues[2];\nmsg.pw = msg.connectionValues[3];\nmsg.database = msg.connectionValues[4];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "02aa7986ab49c73f",
        "type": "subflow",
        "name": "DatabaseConnectionSetter",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 160,
                "y": 280,
                "wires": [
                    {
                        "id": "9685c01aab3d30fe"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 960,
                "y": 240,
                "wires": [
                    {
                        "id": "66fa9ec58d31788b",
                        "port": 0
                    },
                    {
                        "id": "c5b80d16f265ee3b",
                        "port": 0
                    }
                ]
            },
            {
                "x": 960,
                "y": 360,
                "wires": [
                    {
                        "id": "9685c01aab3d30fe",
                        "port": "2"
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "9685c01aab3d30fe",
        "type": "switch",
        "z": "02aa7986ab49c73f",
        "name": "SwitchDbProvider",
        "property": "dbProvider",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "postgres",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "mssql",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 390,
        "y": 280,
        "wires": [
            [
                "66fa9ec58d31788b"
            ],
            [
                "c5b80d16f265ee3b"
            ],
            []
        ]
    },
    {
        "id": "c5b80d16f265ee3b",
        "type": "function",
        "z": "02aa7986ab49c73f",
        "name": "SetMssqlConnectionDynamically",
        "func": "const mssql = global.get('mssql');\n\nvar host = msg.host;\nvar port = msg.port;\nvar database = msg.database;\nvar user = msg.user;\nvar password = msg.pw;\n\nconst mssqlConfig = {\n  user: user,\n  password: password,\n  server: host,\n  port: parseInt(port),\n  database: database,\n  options: {\n    trustedConnection: true,\n    encrypt: false,\n    enableArithAbort: true,\n    trustServerCertificate: true,\n\n  }\n};\n\nmsg.mssqlConfig = mssqlConfig;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "66fa9ec58d31788b",
        "type": "function",
        "z": "02aa7986ab49c73f",
        "name": "SetPostgresConnectionDynamically",
        "func": "msg.pgConfig = {\n  user: msg.user, \n  password: msg.pw, \n  host: msg.host, \n  database: msg.database, \n  port: msg.port\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "e75ce79db26486a2",
        "type": "subflow",
        "name": "DbObjectNameChecker",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 240,
                "y": 280,
                "wires": [
                    {
                        "id": "5ac28399f10fcc76"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 760,
                "y": 200,
                "wires": [
                    {
                        "id": "5ac28399f10fcc76",
                        "port": 0
                    }
                ]
            },
            {
                "x": 760,
                "y": 340,
                "wires": [
                    {
                        "id": "5ac28399f10fcc76",
                        "port": 1
                    },
                    {
                        "id": "5ac28399f10fcc76",
                        "port": 2
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "5ac28399f10fcc76",
        "type": "switch",
        "z": "e75ce79db26486a2",
        "name": "CheckObjectName",
        "property": "dbObjectName",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            },
            {
                "t": "empty"
            },
            {
                "t": "istype",
                "v": "undefined",
                "vt": "undefined"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 510,
        "y": 280,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "6192a3e917c65f72",
        "type": "subflow",
        "name": "GetFunction",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 240,
                "wires": [
                    {
                        "id": "245a3f36ba00d042"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 980,
                "y": 200,
                "wires": [
                    {
                        "id": "9fd99a93ab5869d7",
                        "port": 0
                    }
                ]
            },
            {
                "x": 980,
                "y": 300,
                "wires": [
                    {
                        "id": "9fd99a93ab5869d7",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "1b6b666c27766871",
        "type": "function",
        "z": "6192a3e917c65f72",
        "name": "MSSQL-Function",
        "func": "const mssql = global.get('mssql');\n\nasync function query(){\n    try {\n      await mssql.connect(msg.mssqlConfig);\n      var result = await mssql.query`SELECT\n    routine_name\nFROM \n    information_schema.routines\nWHERE \n    routine_type = 'FUNCTION'\nAND \n    routine_name = ${msg.funcName}\nAND\n    routine_schema = ${msg.schema};`;\n      msg.payload = result.recordset;\n      node.send(msg);\n    } catch (err) {\n      throw err;\n    } finally {\n      await mssql.close();\n    }\n  }\n\nawait query();",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 340,
        "wires": [
            [
                "9fd99a93ab5869d7"
            ]
        ]
    },
    {
        "id": "245a3f36ba00d042",
        "type": "switch",
        "z": "6192a3e917c65f72",
        "name": "CheckForProvider",
        "property": "dbProvider",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "postgres",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "mssql",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 190,
        "y": 240,
        "wires": [
            [
                "e52f7b680e1c92d2"
            ],
            [
                "1b6b666c27766871"
            ]
        ]
    },
    {
        "id": "9fd99a93ab5869d7",
        "type": "switch",
        "z": "6192a3e917c65f72",
        "name": "CheckPayloadLength",
        "property": "payload.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gte",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 800,
        "y": 260,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "e52f7b680e1c92d2",
        "type": "postgresql",
        "z": "6192a3e917c65f72",
        "name": "Function",
        "query": "SELECT routine_name \nFROM \ninformation_schema.routines\nWHERE \nroutine_type = 'FUNCTION'\nAND \nroutine_name = '{{{msg.funcName}}}'\nAND\nroutine_schema = '{{{msg.schema}}}';",
        "postgreSQLConfig": "",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 460,
        "y": 180,
        "wires": [
            [
                "9fd99a93ab5869d7"
            ]
        ]
    },
    {
        "id": "14f40821ce7b1a4f",
        "type": "subflow",
        "name": "GetProcedure",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 220,
                "wires": [
                    {
                        "id": "dfd794165e241dbd"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1020,
                "y": 180,
                "wires": [
                    {
                        "id": "dd56dc51ba723ca1",
                        "port": 0
                    }
                ]
            },
            {
                "x": 1020,
                "y": 320,
                "wires": [
                    {
                        "id": "dd56dc51ba723ca1",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "dfd794165e241dbd",
        "type": "switch",
        "z": "14f40821ce7b1a4f",
        "name": "CheckForProvider",
        "property": "dbProvider",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "postgres",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "mssql",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 210,
        "y": 220,
        "wires": [
            [
                "194c5693bdf3ecd8"
            ],
            [
                "9d86251fc17f83e9"
            ]
        ]
    },
    {
        "id": "9d86251fc17f83e9",
        "type": "function",
        "z": "14f40821ce7b1a4f",
        "name": "MSSQL-Procedure",
        "func": "const mssql = global.get('mssql');\n\nasync function query(){\n    try {\n      await mssql.connect(msg.mssqlConfig);\n      var result = await mssql.query`SELECT\n    routine_name\nFROM \n    information_schema.routines\nWHERE \n    routine_type = 'PROCEDURE'\nAND \n    routine_name = ${msg.procName}\nAND\n    routine_schema = ${msg.schema};`;\n      msg.payload = result.recordset;\n      node.send(msg);\n    } catch (err) {\n      throw err;\n    } finally {\n      await mssql.close();\n    }\n  }\n\nawait query();",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 320,
        "wires": [
            [
                "dd56dc51ba723ca1"
            ]
        ]
    },
    {
        "id": "dd56dc51ba723ca1",
        "type": "switch",
        "z": "14f40821ce7b1a4f",
        "name": "CheckPayloadLength",
        "property": "payload.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gte",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 820,
        "y": 240,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "194c5693bdf3ecd8",
        "type": "postgresql",
        "z": "14f40821ce7b1a4f",
        "name": "Procedure",
        "query": "SELECT routine_name FROM information_schema.routines\nWHERE routine_type = 'PROCEDURE' AND \nroutine_name = '{{{msg.procName}}}'\nAND\nroutine_schema = '{{{msg.schema}}}';",
        "postgreSQLConfig": "",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 490,
        "y": 140,
        "wires": [
            [
                "dd56dc51ba723ca1"
            ]
        ]
    },
    {
        "id": "f03204506d037819",
        "type": "subflow",
        "name": "GetView",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 260,
                "wires": [
                    {
                        "id": "1d33f96ed70bc2ad"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1080,
                "y": 220,
                "wires": [
                    {
                        "id": "acaab53aaa06ec96",
                        "port": 0
                    }
                ]
            },
            {
                "x": 1080,
                "y": 360,
                "wires": [
                    {
                        "id": "acaab53aaa06ec96",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "1d33f96ed70bc2ad",
        "type": "switch",
        "z": "f03204506d037819",
        "name": "CheckForProvider",
        "property": "dbProvider",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "postgres",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "mssql",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 230,
        "y": 260,
        "wires": [
            [
                "f7e798173bb50b17"
            ],
            [
                "38e1ee34d920f9ed"
            ]
        ]
    },
    {
        "id": "38e1ee34d920f9ed",
        "type": "function",
        "z": "f03204506d037819",
        "name": "MSSQL-View",
        "func": "const mssql = global.get('mssql');\n\nasync function query(){\n    try {\n      await mssql.connect(msg.mssqlConfig);\n      var result = await mssql.query`SELECT table_name FROM information_schema.tables\nWHERE table_schema = ${msg.schema}\nAND table_name = ${msg.viewName}\nAND table_type = 'VIEW'`;\n      msg.payload = result.recordset;\n      node.send(msg);\n    } catch (err) {\n      throw err;\n    } finally {\n      await mssql.close();\n    }\n  }\n\nawait query();",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 360,
        "wires": [
            [
                "acaab53aaa06ec96"
            ]
        ]
    },
    {
        "id": "acaab53aaa06ec96",
        "type": "switch",
        "z": "f03204506d037819",
        "name": "CheckPayloadLength",
        "property": "payload.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 840,
        "y": 280,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "f7e798173bb50b17",
        "type": "postgresql",
        "z": "f03204506d037819",
        "name": "View",
        "query": "SELECT table_name FROM information_schema.tables WHERE table_schema = '{{{msg.schema}}}' AND table_name = '{{{msg.viewName}}}' AND table_type = 'VIEW';",
        "postgreSQLConfig": "",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 510,
        "y": 160,
        "wires": [
            [
                "acaab53aaa06ec96"
            ]
        ]
    },
    {
        "id": "d135cb27637ed1f7",
        "type": "subflow",
        "name": "GetTable",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 220,
                "wires": [
                    {
                        "id": "4880ff43be0932d7"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1140,
                "y": 280,
                "wires": [
                    {
                        "id": "ad756c4bd9a7537b",
                        "port": 1
                    }
                ]
            },
            {
                "x": 1140,
                "y": 180,
                "wires": [
                    {
                        "id": "ad756c4bd9a7537b",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "4880ff43be0932d7",
        "type": "switch",
        "z": "d135cb27637ed1f7",
        "name": "CheckForProvider",
        "property": "dbProvider",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "postgres",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "mssql",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 250,
        "y": 220,
        "wires": [
            [
                "a3683bdbcf5f566c"
            ],
            [
                "158696a59026be69"
            ]
        ]
    },
    {
        "id": "158696a59026be69",
        "type": "function",
        "z": "d135cb27637ed1f7",
        "name": "MSSQL-Table",
        "func": "const mssql = global.get('mssql');\n\nasync function query(){\n    try {\n      await mssql.connect(msg.mssqlConfig);\n      var result = await mssql.query`SELECT table_name FROM information_schema.tables\nWHERE table_schema = ${msg.schema}\nAND table_name = ${msg.tableName}\nAND table_type = 'BASE TABLE'`;\n      msg.payload = result.recordset\n      node.send(msg);\n    } catch (err) {\n      throw err;\n    } finally {\n      await mssql.close();\n    }\n  }\n\nawait query();",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 320,
        "wires": [
            [
                "ad756c4bd9a7537b"
            ]
        ]
    },
    {
        "id": "a3683bdbcf5f566c",
        "type": "postgresql",
        "z": "d135cb27637ed1f7",
        "name": "Table",
        "query": "SELECT table_name FROM information_schema.tables WHERE table_schema = '{{{msg.schema}}}' AND table_name = '{{{msg.tableName}}}' AND table_type = 'BASE TABLE'",
        "postgreSQLConfig": "",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 510,
        "y": 140,
        "wires": [
            [
                "ad756c4bd9a7537b"
            ]
        ]
    },
    {
        "id": "ad756c4bd9a7537b",
        "type": "switch",
        "z": "d135cb27637ed1f7",
        "name": "CheckPayloadLength",
        "property": "payload.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 880,
        "y": 220,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "83359f6b9b1c7459",
        "type": "subflow",
        "name": "SchemaExistenceChecker",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 240,
                "wires": [
                    {
                        "id": "74aa8a3d50db4451"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1520,
                "y": 360,
                "wires": [
                    {
                        "id": "b2afa58e8ab26712",
                        "port": 1
                    }
                ]
            },
            {
                "x": 1520,
                "y": 160,
                "wires": [
                    {
                        "id": "b2afa58e8ab26712",
                        "port": 0
                    }
                ]
            },
            {
                "x": 520,
                "y": 460,
                "wires": [
                    {
                        "id": "74aa8a3d50db4451",
                        "port": 1
                    },
                    {
                        "id": "74aa8a3d50db4451",
                        "port": 2
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "3b4912d1ef536ce1",
        "type": "switch",
        "z": "83359f6b9b1c7459",
        "name": "CheckForProvider",
        "property": "dbProvider",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "postgres",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "mssql",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 610,
        "y": 240,
        "wires": [
            [
                "30018a4b3ef71330"
            ],
            [
                "d0cc781f89dae53a"
            ]
        ]
    },
    {
        "id": "d0cc781f89dae53a",
        "type": "function",
        "z": "83359f6b9b1c7459",
        "name": "SelectForSchemas (MSSQL)",
        "func": "const mssql = global.get('mssql');\n\nasync function query() {\n  try {\n    var conn = new mssql.ConnectionPool(msg.mssqlConfig);\n    conn.connect().then(function (pool) {\n      var request = new mssql.Request(pool);\n      var query = `SELECT schema_name FROM information_schema.schemata\n      where schema_name = '${msg.schema}'`;\n      request.query(query, function (error, records) {\n        msg.payload = records.recordset;\n        node.send(msg);\n        conn.close();\n      });\n    });\n  } catch (err) {\n    throw err;\n  } finally {\n    await mssql.close();\n  }\n}\n\nawait query();",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 380,
        "wires": [
            [
                "b2afa58e8ab26712"
            ]
        ]
    },
    {
        "id": "b2afa58e8ab26712",
        "type": "switch",
        "z": "83359f6b9b1c7459",
        "name": "CheckForNoSchema",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "empty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1200,
        "y": 280,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "30018a4b3ef71330",
        "type": "postgresql",
        "z": "83359f6b9b1c7459",
        "name": "SelectForSchemas",
        "query": "SELECT schema_name FROM information_schema.schemata\nwhere schema_name = '{{{msg.schema}}}'",
        "postgreSQLConfig": "",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 870,
        "y": 160,
        "wires": [
            [
                "b2afa58e8ab26712"
            ]
        ]
    },
    {
        "id": "74aa8a3d50db4451",
        "type": "switch",
        "z": "83359f6b9b1c7459",
        "name": "CheckForSchema",
        "property": "schema",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            },
            {
                "t": "empty"
            },
            {
                "t": "istype",
                "v": "undefined",
                "vt": "undefined"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 250,
        "y": 240,
        "wires": [
            [
                "3b4912d1ef536ce1"
            ],
            [],
            []
        ]
    },
    {
        "id": "700c49c23ddc27cc",
        "type": "subflow",
        "name": "DbObjectTypeChecker",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 220,
                "wires": [
                    {
                        "id": "d14273e6f6d3fd41"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 620,
                "y": 100,
                "wires": [
                    {
                        "id": "d14273e6f6d3fd41",
                        "port": 0
                    },
                    {
                        "id": "d14273e6f6d3fd41",
                        "port": 1
                    },
                    {
                        "id": "d14273e6f6d3fd41",
                        "port": 2
                    },
                    {
                        "id": "d14273e6f6d3fd41",
                        "port": 3
                    }
                ]
            },
            {
                "x": 620,
                "y": 220,
                "wires": [
                    {
                        "id": "d14273e6f6d3fd41",
                        "port": 4
                    },
                    {
                        "id": "d14273e6f6d3fd41",
                        "port": 5
                    }
                ]
            },
            {
                "x": 620,
                "y": 320,
                "wires": [
                    {
                        "id": "d14273e6f6d3fd41",
                        "port": 6
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "d14273e6f6d3fd41",
        "type": "switch",
        "z": "700c49c23ddc27cc",
        "name": "CheckForDbObjectType",
        "property": "dbObjectType",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "table",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "view",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "function",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "strp",
                "vt": "str"
            },
            {
                "t": "empty"
            },
            {
                "t": "istype",
                "v": "undefined",
                "vt": "undefined"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 7,
        "x": 370,
        "y": 220,
        "wires": [
            [],
            [],
            [],
            [],
            [],
            [],
            []
        ]
    },
    {
        "id": "65ace00d8439925e",
        "type": "subflow",
        "name": "GetViewData",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 240,
                "wires": [
                    {
                        "id": "4ac2a455f046188e"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 2480,
                "y": 200,
                "wires": [
                    {
                        "id": "73f9bcd707ca7e30",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "53d7818aa951854c",
        "type": "function",
        "z": "65ace00d8439925e",
        "name": "StoreAttributes",
        "func": "msg.properties = [];\n\nfor (let i = 0; i < msg.payload.length; i++){\n    msg.properties.push({\"propertyName\": msg.payload[i].column_name});\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 140,
        "wires": [
            [
                "67479e64924e8528"
            ]
        ]
    },
    {
        "id": "3e6f340df4e73a4f",
        "type": "function",
        "z": "65ace00d8439925e",
        "name": "SetResultTables",
        "func": "msg.result = [];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1320,
        "y": 140,
        "wires": [
            [
                "8e481041071f2b7c"
            ]
        ]
    },
    {
        "id": "386b5548b1affa11",
        "type": "function",
        "z": "65ace00d8439925e",
        "name": "SetTableName",
        "func": "msg.tableName = msg.loop.value.referenced_table_name;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1480,
        "y": 200,
        "wires": [
            [
                "0da9b44fb4f493c8"
            ]
        ]
    },
    {
        "id": "0da9b44fb4f493c8",
        "type": "subflow:ce3537f37c72e32b",
        "z": "65ace00d8439925e",
        "name": "",
        "x": 1690,
        "y": 200,
        "wires": [
            [
                "bc30eb640385183d"
            ]
        ]
    },
    {
        "id": "bc30eb640385183d",
        "type": "function",
        "z": "65ace00d8439925e",
        "name": "UpdateResultTables",
        "func": "msg.result.push(msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1920,
        "y": 200,
        "wires": [
            [
                "8e481041071f2b7c"
            ]
        ]
    },
    {
        "id": "0f73bc669f14d354",
        "type": "function",
        "z": "65ace00d8439925e",
        "name": "RetrievePrimaryKeys",
        "func": "msg.pk = [];\n\nfor (let i = 0; i < msg.result.length; i++){\n    msg.pk = msg.pk.concat(msg.result[i].pk);\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1860,
        "y": 120,
        "wires": [
            [
                "73f9bcd707ca7e30"
            ]
        ]
    },
    {
        "id": "cc58e384eb86545e",
        "type": "function",
        "z": "65ace00d8439925e",
        "name": "GetViewAttributes (MSSQL)",
        "func": "const mssql = global.get('mssql');\n\nasync function query() {\n  try {\n    var conn = new mssql.ConnectionPool(msg.mssqlConfig);\n    conn.connect().then(function (pool) {\n      var request = new mssql.Request(pool);\n      var query = `SELECT COLUMN_NAME\nFROM information_schema.COLUMNS AS c\nINNER JOIN information_schema.VIEWS AS v\nON c.TABLE_NAME = v.TABLE_NAME\nWHERE c.TABLE_NAME = '${msg.viewName}' AND c.TABLE_SCHEMA = '${msg.schema}'`;\n      request.query(query, function (error, records) {\n        msg.payload = records.recordset;\n        node.send(msg);\n        conn.close();\n      });\n    });\n  } catch (err) {\n    throw err;\n  } finally {\n    await mssql.close();\n  }\n}\n\nawait query();",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 340,
        "wires": [
            [
                "e9e6bca3f024e706"
            ]
        ]
    },
    {
        "id": "e9e6bca3f024e706",
        "type": "function",
        "z": "65ace00d8439925e",
        "name": "StoreAttributes",
        "func": "msg.properties = [];\n\nfor (let i = 0; i < msg.payload.length; i++){\n    msg.properties.push({\"propertyName\": msg.payload[i].COLUMN_NAME});\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 340,
        "wires": [
            [
                "d1ec5925b31a50d6"
            ]
        ]
    },
    {
        "id": "d1ec5925b31a50d6",
        "type": "function",
        "z": "65ace00d8439925e",
        "name": "GetUnderlyingTables (MSSQL)",
        "func": "const mssql = global.get('mssql');\n\nasync function query() {\n  try {\n    var conn = new mssql.ConnectionPool(msg.mssqlConfig);\n    conn.connect().then(function (pool) {\n      var request = new mssql.Request(pool);\n      var query = `select  \n       o.name as referenced_table_name\nfrom sys.views v\njoin sys.sql_expression_dependencies d\n     on d.referencing_id = v.object_id\n     and d.referenced_id is not null\njoin sys.objects o\n     on o.object_id = d.referenced_id\nwhere schema_name(v.schema_id) = '${msg.schema}'\nAND v.name = '${msg.viewName}'\n order by schema_name(v.schema_id),\n          v.name;`;\n      request.query(query, function (error, records) {\n        msg.payload = records.recordset;\n        node.send(msg);\n        conn.close();\n      });\n    });\n  } catch (err) {\n    throw err;\n  } finally {\n    await mssql.close();\n  }\n}\n\nawait query();",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 340,
        "wires": [
            [
                "7f14044227773234"
            ]
        ]
    },
    {
        "id": "7f14044227773234",
        "type": "function",
        "z": "65ace00d8439925e",
        "name": "SetResultTables",
        "func": "msg.result = [];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1320,
        "y": 340,
        "wires": [
            [
                "46834562e44ce403"
            ]
        ]
    },
    {
        "id": "46834562e44ce403",
        "type": "loop",
        "z": "65ace00d8439925e",
        "name": "",
        "kind": "enum",
        "count": "",
        "initial": "1",
        "step": "1",
        "condition": "",
        "conditionType": "js",
        "when": "before",
        "enumeration": "payload",
        "enumerationType": "msg",
        "limit": "",
        "loopPayload": "loop-val",
        "finalPayload": "final-count",
        "x": 1610,
        "y": 320,
        "wires": [
            [
                "d736c0823233beb9"
            ],
            [
                "d021c2b2fecf14c2"
            ]
        ]
    },
    {
        "id": "d021c2b2fecf14c2",
        "type": "function",
        "z": "65ace00d8439925e",
        "name": "SetTableName",
        "func": "msg.tableName = msg.loop.value.referenced_table_name;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1500,
        "y": 400,
        "wires": [
            [
                "dac646b9338c6962"
            ]
        ]
    },
    {
        "id": "dac646b9338c6962",
        "type": "subflow:ce3537f37c72e32b",
        "z": "65ace00d8439925e",
        "name": "",
        "x": 1710,
        "y": 400,
        "wires": [
            [
                "4cae367af696c9e3"
            ]
        ]
    },
    {
        "id": "4cae367af696c9e3",
        "type": "function",
        "z": "65ace00d8439925e",
        "name": "UpdateResultTables",
        "func": "msg.result.push(msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1940,
        "y": 400,
        "wires": [
            [
                "46834562e44ce403"
            ]
        ]
    },
    {
        "id": "d736c0823233beb9",
        "type": "function",
        "z": "65ace00d8439925e",
        "name": "RetrievePrimaryKeys",
        "func": "msg.pk = [];\n\nfor (let i = 0; i < msg.result.length; i++){\n    console.log(msg.result[i].pk);\n    msg.pk = msg.pk.concat(msg.result[i].pk);\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1880,
        "y": 320,
        "wires": [
            [
                "73f9bcd707ca7e30"
            ]
        ]
    },
    {
        "id": "73f9bcd707ca7e30",
        "type": "function",
        "z": "65ace00d8439925e",
        "name": "StandardizeResponse",
        "func": "var data = {\n    \"name\": msg.viewName,\n    \"schema\": msg.schema,\n    \"properties\": msg.properties,\n    \"pk\": msg.pk\n}\n\nmsg.payload = data;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2260,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "4ac2a455f046188e",
        "type": "switch",
        "z": "65ace00d8439925e",
        "name": "SwitchDbProvider",
        "property": "dbProvider",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "postgres",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "mssql",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 210,
        "y": 240,
        "wires": [
            [
                "c4b40753d2d8ebb7"
            ],
            [
                "cc58e384eb86545e"
            ]
        ]
    },
    {
        "id": "c4b40753d2d8ebb7",
        "type": "postgresql",
        "z": "65ace00d8439925e",
        "name": "GetViewAttributes",
        "query": "SELECT column_name FROM information_schema.columns c INNER JOIN information_schema.views v ON c.table_name = v.table_name WHERE c.table_name = '{{{msg.viewName}}}' AND c.table_schema = '{{{msg.schema}}}' ",
        "postgreSQLConfig": "",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 510,
        "y": 140,
        "wires": [
            [
                "53d7818aa951854c"
            ]
        ]
    },
    {
        "id": "67479e64924e8528",
        "type": "postgresql",
        "z": "65ace00d8439925e",
        "name": "GetUnderlyingTables",
        "query": "select u.table_name as referenced_table_name \nfrom information_schema.view_table_usage u\njoin information_schema.views v\n on u.view_schema = v.table_schema\n and u.view_name = v.table_name\n where u.table_schema not in ('information_schema', 'pg_catalog')\n AND u.view_name = '{{{msg.viewName}}}'\n AND u.view_schema = '{{{msg.schema}}}'\n order by u.view_schema,\n u.view_name;",
        "postgreSQLConfig": "",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1040,
        "y": 140,
        "wires": [
            [
                "3e6f340df4e73a4f"
            ]
        ]
    },
    {
        "id": "8e481041071f2b7c",
        "type": "loop",
        "z": "65ace00d8439925e",
        "name": "",
        "kind": "enum",
        "count": "",
        "initial": "1",
        "step": "1",
        "condition": "",
        "conditionType": "js",
        "when": "before",
        "enumeration": "payload",
        "enumerationType": "msg",
        "limit": "",
        "loopPayload": "loop-val",
        "finalPayload": "final-count",
        "x": 1610,
        "y": 120,
        "wires": [
            [
                "0f73bc669f14d354"
            ],
            [
                "386b5548b1affa11"
            ]
        ]
    },
    {
        "id": "ce3537f37c72e32b",
        "type": "subflow",
        "name": "GetTableData",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 400,
                "wires": [
                    {
                        "id": "c42e8a98bf7b021e"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1720,
                "y": 360,
                "wires": [
                    {
                        "id": "15983cd6a85b93c5",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "a8371c944676373a",
        "type": "function",
        "z": "ce3537f37c72e32b",
        "name": "StoreAttributes",
        "func": "msg.properties = [];\n\nfor (let i = 0; i < msg.payload.length; i++){\n    msg.properties.push({\"propertyName\": msg.payload[i].column_name});\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 260,
        "wires": [
            [
                "182d9eaf89ef35e5"
            ]
        ]
    },
    {
        "id": "4ad701233a96fe4e",
        "type": "function",
        "z": "ce3537f37c72e32b",
        "name": "StorePrimaryKey",
        "func": "msg.pk = [];\n\nfor (let i = 0; i < msg.payload.length; i++){\nmsg.pk.push(msg.payload[i].key_column);\n}\n    \nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 260,
        "wires": [
            [
                "15983cd6a85b93c5"
            ]
        ]
    },
    {
        "id": "c42e8a98bf7b021e",
        "type": "switch",
        "z": "ce3537f37c72e32b",
        "name": "SwitchDbProvider",
        "property": "dbProvider",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "postgres",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "mssql",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 210,
        "y": 400,
        "wires": [
            [
                "ed600a44a55e9c7f"
            ],
            [
                "3c4e2045582f1d26"
            ]
        ]
    },
    {
        "id": "41323347c06d7ef6",
        "type": "function",
        "z": "ce3537f37c72e32b",
        "name": "StoreAttributes",
        "func": "msg.properties = [];\n\nfor (let i = 0; i < msg.payload.length; i++){\n    msg.properties.push({\"propertyName\": msg.payload[i].COLUMN_NAME});\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 460,
        "wires": [
            [
                "41a324b5a403e1fd"
            ]
        ]
    },
    {
        "id": "b30e38fe25999300",
        "type": "function",
        "z": "ce3537f37c72e32b",
        "name": "StorePrimaryKey",
        "func": "msg.pk = [];\n\nfor (let i = 0; i < msg.payload.length; i++){\nmsg.pk.push(msg.payload[i].COLUMN_NAME);\n}\n    \nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 460,
        "wires": [
            [
                "15983cd6a85b93c5"
            ]
        ]
    },
    {
        "id": "15983cd6a85b93c5",
        "type": "function",
        "z": "ce3537f37c72e32b",
        "name": "StandardizeResponse",
        "func": "var data = {\n    \"name\": msg.tableName,\n    \"schema\": msg.schema,\n    \"properties\": msg.properties,\n    \"pk\": msg.pk\n}\n\nmsg.payload = data;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1540,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "3c4e2045582f1d26",
        "type": "function",
        "z": "ce3537f37c72e32b",
        "name": "GetTableAttributes (MSSQL)",
        "func": "const mssql = global.get('mssql');\n\nasync function query() {\n  try {\n    var conn = new mssql.ConnectionPool(msg.mssqlConfig);\n    conn.connect().then(function (pool) {\n      var request = new mssql.Request(pool);\n      var query = `SELECT COLUMN_NAME\nFROM INFORMATION_SCHEMA.COLUMNS\nWHERE TABLE_SCHEMA = '${msg.schema}' AND TABLE_NAME = '${msg.tableName}';`;\n      request.query(query, function (error, records) {\n        msg.payload = records.recordset;\n        node.send(msg);\n        conn.close();\n      });\n    });\n  } catch (err) {\n    throw err;\n  } finally {\n    await mssql.close();\n  }\n}\n\nawait query();",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 460,
        "wires": [
            [
                "41323347c06d7ef6"
            ]
        ]
    },
    {
        "id": "41a324b5a403e1fd",
        "type": "function",
        "z": "ce3537f37c72e32b",
        "name": "GetTablePrimaryKey (MSSQL)",
        "func": "const mssql = global.get('mssql');\n\nasync function query() {\n  try {\n    var conn = new mssql.ConnectionPool(msg.mssqlConfig);\n    conn.connect().then(function (pool) {\n      var request = new mssql.Request(pool);\n      var query = `SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE WHERE OBJECTPROPERTY(OBJECT_ID(CONSTRAINT_SCHEMA + '.' + CONSTRAINT_NAME), 'IsPrimaryKey') = 1 AND TABLE_NAME = '${msg.tableName}' AND TABLE_SCHEMA = '${msg.schema}';`;\n      request.query(query, function (error, records) {\n        msg.payload = records.recordset;\n        node.send(msg);\n        conn.close();\n      });\n    });\n  } catch (err) {\n    throw err;\n  } finally {\n    await mssql.close();\n  }\n}\n\nawait query();",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 460,
        "wires": [
            [
                "b30e38fe25999300"
            ]
        ]
    },
    {
        "id": "ed600a44a55e9c7f",
        "type": "postgresql",
        "z": "ce3537f37c72e32b",
        "name": "GetTableAttributes",
        "query": "SELECT column_name FROM information_schema.columns WHERE table_name   = '{{{msg.tableName}}}' AND table_schema = '{{{msg.schema}}}';",
        "postgreSQLConfig": "",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 490,
        "y": 260,
        "wires": [
            [
                "a8371c944676373a"
            ]
        ]
    },
    {
        "id": "182d9eaf89ef35e5",
        "type": "postgresql",
        "z": "ce3537f37c72e32b",
        "name": "GetTablePrimaryKey",
        "query": "select kcu.column_name as key_column \nfrom information_schema.table_constraints tco\njoin information_schema.key_column_usage kcu on kcu.constraint_name = tco.constraint_name \nand kcu.constraint_schema = tco.constraint_schema\nand kcu.constraint_name = tco.constraint_name \nwhere tco.constraint_type = 'PRIMARY KEY' and kcu.table_name = '{{{msg.tableName}}}'\nand kcu.table_schema = '{{{msg.schema}}}'\norder by kcu.table_schema,kcu.table_name,kcu.ordinal_position;",
        "postgreSQLConfig": "",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 980,
        "y": 260,
        "wires": [
            [
                "4ad701233a96fe4e"
            ]
        ]
    },
    {
        "id": "ac9dc272f4af2a33",
        "type": "subflow",
        "name": "GetDbObjects",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 440,
                "y": 340,
                "wires": [
                    {
                        "id": "2e096fe541db090d"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1520,
                "y": 360,
                "wires": [
                    {
                        "id": "54fc4d71249f0d09",
                        "port": 0
                    },
                    {
                        "id": "16615a2708466109",
                        "port": 0
                    },
                    {
                        "id": "ebc07f3a95b4ff66",
                        "port": 0
                    },
                    {
                        "id": "09f81d38390ba9f3",
                        "port": 0
                    },
                    {
                        "id": "b5046cc87654b005",
                        "port": 0
                    },
                    {
                        "id": "7cfc3fc0b59619e4",
                        "port": 0
                    },
                    {
                        "id": "4702f11d39829bf1",
                        "port": 0
                    },
                    {
                        "id": "76916a4effd47292",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "2e096fe541db090d",
        "type": "switch",
        "z": "ac9dc272f4af2a33",
        "name": "CheckForProvider",
        "property": "dbProvider",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "postgres",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "mssql",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 590,
        "y": 340,
        "wires": [
            [
                "2d23effaead49d28"
            ],
            [
                "c32970b4e6fd7fc4"
            ]
        ]
    },
    {
        "id": "2d23effaead49d28",
        "type": "switch",
        "z": "ac9dc272f4af2a33",
        "name": "DbObjectType",
        "property": "dbObjectType",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "table",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "view",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "strp",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "function",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 900,
        "y": 220,
        "wires": [
            [
                "cf8cca0eb567a5be"
            ],
            [
                "081547ff4d56bd60"
            ],
            [
                "a03af7190fa9887e"
            ],
            [
                "27ca233a9f2ef1db"
            ]
        ]
    },
    {
        "id": "54fc4d71249f0d09",
        "type": "function",
        "z": "ac9dc272f4af2a33",
        "name": "StandardizeResult",
        "func": "var dbResult = msg.payload;\nvar newResult = [];\n\nfor (let i = 0; i < dbResult.length; i++){\n    var name = dbResult[i].table_name;\n    newResult.push({\"dbObjectName\": name});\n}\n\nmsg.payload = {\n    \"result\": newResult\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "16615a2708466109",
        "type": "function",
        "z": "ac9dc272f4af2a33",
        "name": "StandardizeResult",
        "func": "var dbResult = msg.payload;\nvar newResult = [];\n\nfor (let i = 0; i < dbResult.length; i++){\n    var name = dbResult[i].table_name;\n    newResult.push({\"dbObjectName\": name});\n}\n\nmsg.payload = {\n    \"result\": newResult\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "ebc07f3a95b4ff66",
        "type": "function",
        "z": "ac9dc272f4af2a33",
        "name": "StandardizeResult",
        "func": "var dbResult = msg.payload;\nvar newResult = [];\n\nfor (let i = 0; i < dbResult.length; i++){\n    var name = dbResult[i].routine_name;\n    newResult.push({\"dbObjectName\": name});\n}\n\nmsg.payload = {\n    \"result\": newResult\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "09f81d38390ba9f3",
        "type": "function",
        "z": "ac9dc272f4af2a33",
        "name": "StandardizeResult",
        "func": "var dbResult = msg.payload;\nvar newResult = [];\n\nfor (let i = 0; i < dbResult.length; i++){\n    var name = dbResult[i].routine_name;\n    newResult.push({\"dbObjectName\": name});\n}\n\nmsg.payload = {\n    \"result\": newResult\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "13efdc867512f70b",
        "type": "function",
        "z": "ac9dc272f4af2a33",
        "name": "MSSQL-Table",
        "func": "const mssql = global.get('mssql');\n\nasync function query(){\n    try {\n      await mssql.connect(msg.mssqlConfig);\n      msg.payload = await mssql.query`SELECT table_name FROM information_schema.tables\nWHERE table_schema = ${msg.schema}\nAND table_type = 'BASE TABLE'`;\n      node.send(msg);\n    } catch (err) {\n      throw err;\n    } finally {\n      await mssql.close();\n    }\n  }\n\nawait query();",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 460,
        "wires": [
            [
                "b5046cc87654b005"
            ]
        ]
    },
    {
        "id": "b5046cc87654b005",
        "type": "function",
        "z": "ac9dc272f4af2a33",
        "name": "StandardizeResult",
        "func": "var dbResult = msg.payload.recordset;\nvar newResult = [];\n\nfor (let i = 0; i < dbResult.length; i++){\n    var name = dbResult[i].table_name;\n    newResult.push({\"dbObjectName\": name});\n}\n\nmsg.payload = {\n    \"result\": newResult\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "3e1a8ac0771d1336",
        "type": "function",
        "z": "ac9dc272f4af2a33",
        "name": "MSSQL-View",
        "func": "const mssql = global.get('mssql');\n\nasync function query(){\n    try {\n      await mssql.connect(msg.mssqlConfig);\n      msg.payload = await mssql.query`SELECT table_name FROM information_schema.tables\nWHERE table_schema = ${msg.schema}\nAND table_type = 'VIEW'`;\n      node.send(msg);\n    } catch (err) {\n      throw err;\n    } finally {\n      await mssql.close();\n    }\n  }\n\nawait query();",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 500,
        "wires": [
            [
                "7cfc3fc0b59619e4"
            ]
        ]
    },
    {
        "id": "7cfc3fc0b59619e4",
        "type": "function",
        "z": "ac9dc272f4af2a33",
        "name": "StandardizeResult",
        "func": "var dbResult = msg.payload.recordset;\nvar newResult = [];\n\nfor (let i = 0; i < dbResult.length; i++){\n    var name = dbResult[i].table_name;\n    newResult.push({\"dbObjectName\": name});\n}\n\nmsg.payload = {\n    \"result\": newResult\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "4308f011dc77a72b",
        "type": "function",
        "z": "ac9dc272f4af2a33",
        "name": "MSSQL-Proc",
        "func": "const mssql = global.get('mssql');\n\nasync function query(){\n    try {\n      await mssql.connect(msg.mssqlConfig);\n      msg.payload = await mssql.query`SELECT\n    routine_name\nFROM \n    information_schema.routines\nWHERE \n    routine_type = 'PROCEDURE'\nAND\n    routine_schema = ${msg.schema};`;\n      node.send(msg);\n    } catch (err) {\n      throw err;\n    } finally {\n      await mssql.close();\n    }\n  }\n\nawait query();",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 540,
        "wires": [
            [
                "4702f11d39829bf1"
            ]
        ]
    },
    {
        "id": "4702f11d39829bf1",
        "type": "function",
        "z": "ac9dc272f4af2a33",
        "name": "StandardizeResult",
        "func": "var dbResult = msg.payload.recordset;\nvar newResult = [];\n\nfor (let i = 0; i < dbResult.length; i++){\n    var name = dbResult[i].routine_name;\n    newResult.push({\"dbObjectName\": name});\n}\n\nmsg.payload = {\n    \"result\": newResult\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "6bd22819814503bd",
        "type": "function",
        "z": "ac9dc272f4af2a33",
        "name": "MSSQL-Func",
        "func": "const mssql = global.get('mssql');\n\nasync function query(){\n    try {\n      await mssql.connect(msg.mssqlConfig);\n      msg.payload = await mssql.query`SELECT\n    routine_name\nFROM \n    information_schema.routines\nWHERE \n    routine_type = 'FUNCTION'\nAND\n    routine_schema = ${msg.schema};`;\n      node.send(msg);\n    } catch (err) {\n      throw err;\n    } finally {\n      await mssql.close();\n    }\n  }\n\nawait query();",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 580,
        "wires": [
            [
                "76916a4effd47292"
            ]
        ]
    },
    {
        "id": "76916a4effd47292",
        "type": "function",
        "z": "ac9dc272f4af2a33",
        "name": "StandardizeResult",
        "func": "var dbResult = msg.payload.recordset;\nvar newResult = [];\n\nfor (let i = 0; i < dbResult.length; i++){\n    var name = dbResult[i].routine_name;\n    newResult.push({\"dbObjectName\": name});\n}\n\nmsg.payload = {\n    \"result\": newResult\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "c32970b4e6fd7fc4",
        "type": "switch",
        "z": "ac9dc272f4af2a33",
        "name": "DbObjectType",
        "property": "dbObjectType",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "table",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "view",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "strp",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "function",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 900,
        "y": 520,
        "wires": [
            [
                "13efdc867512f70b"
            ],
            [
                "3e1a8ac0771d1336"
            ],
            [
                "4308f011dc77a72b"
            ],
            [
                "6bd22819814503bd"
            ]
        ]
    },
    {
        "id": "cf8cca0eb567a5be",
        "type": "postgresql",
        "z": "ac9dc272f4af2a33",
        "name": "Table",
        "query": "SELECT table_name FROM information_schema.tables WHERE table_schema = '{{{msg.schema}}}' AND table_type = 'BASE TABLE'",
        "postgreSQLConfig": "",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1110,
        "y": 140,
        "wires": [
            [
                "54fc4d71249f0d09"
            ]
        ]
    },
    {
        "id": "081547ff4d56bd60",
        "type": "postgresql",
        "z": "ac9dc272f4af2a33",
        "name": "View",
        "query": "SELECT table_name FROM information_schema.tables WHERE table_schema = '{{{msg.schema}}}' AND table_type = 'VIEW'",
        "postgreSQLConfig": "",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1110,
        "y": 200,
        "wires": [
            [
                "16615a2708466109"
            ]
        ]
    },
    {
        "id": "a03af7190fa9887e",
        "type": "postgresql",
        "z": "ac9dc272f4af2a33",
        "name": "Proc",
        "query": "SELECT  routine_name FROM  information_schema.routines WHERE     routine_type = 'PROCEDURE' AND    routine_schema = '{{{msg.schema}}}';",
        "postgreSQLConfig": "",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1110,
        "y": 260,
        "wires": [
            [
                "ebc07f3a95b4ff66"
            ]
        ]
    },
    {
        "id": "27ca233a9f2ef1db",
        "type": "postgresql",
        "z": "ac9dc272f4af2a33",
        "name": "Func",
        "query": "SELECT routine_name FROM information_schema.routines WHERE routine_type = 'FUNCTION' AND routine_schema = '{{{msg.schema}}}';",
        "postgreSQLConfig": "",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1110,
        "y": 320,
        "wires": [
            [
                "09f81d38390ba9f3"
            ]
        ]
    },
    {
        "id": "8366aaf082e3436f",
        "type": "subflow",
        "name": "ConnectionStringParser",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 280,
                "y": 260,
                "wires": [
                    {
                        "id": "4f03671861f54432"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1700,
                "y": 200,
                "wires": [
                    {
                        "id": "afcfb55e9f2c4ae5",
                        "port": 0
                    }
                ]
            },
            {
                "x": 1360,
                "y": 320,
                "wires": [
                    {
                        "id": "8096768f413b2cb8",
                        "port": 1
                    }
                ]
            },
            {
                "x": 780,
                "y": 400,
                "wires": [
                    {
                        "id": "4f03671861f54432",
                        "port": 1
                    },
                    {
                        "id": "4f03671861f54432",
                        "port": 2
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "18e00f17fb85b948",
        "type": "function",
        "z": "8366aaf082e3436f",
        "name": "ParseConnectionString",
        "func": "var connectionString = msg.payload.conn;\n\n// Get the array of pairs [\"Host=host\", ...]\nvar equations = connectionString.split(\";\");\n\nvar connectionKeys = [];\nvar connectionValues = [];\nvar expectedKeys = [\"Host\", \"Port\", \"User\", \"Pw\", \"Db\", \"Provider\"];\n\nfor (let i = 0; i < equations.length; i++){\n    var keyValueArray = equations[i].split(\"=\");\n    connectionKeys.push(keyValueArray[0]);\n    connectionValues.push(keyValueArray[1]);\n}\n\nvar correctKeys = Array.isArray(expectedKeys) &&\n        Array.isArray(connectionKeys) &&\n        expectedKeys.length === connectionKeys.length &&\n        expectedKeys.every((val, index) => val === connectionKeys[index]);\n        \nif (correctKeys){\n    msg.connKeysCorrect = true;\n    msg.connectionValues = connectionValues;\n} else {\n    msg.connKeysCorrect = false;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 260,
        "wires": [
            [
                "8096768f413b2cb8"
            ]
        ]
    },
    {
        "id": "8096768f413b2cb8",
        "type": "switch",
        "z": "8366aaf082e3436f",
        "name": "CheckForConnectionKeysCorrectness",
        "property": "connKeysCorrect",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1090,
        "y": 260,
        "wires": [
            [
                "afcfb55e9f2c4ae5"
            ],
            []
        ]
    },
    {
        "id": "afcfb55e9f2c4ae5",
        "type": "function",
        "z": "8366aaf082e3436f",
        "name": "ParseConnectionValues",
        "func": "if (msg.connectionValues.some(v => v == \"\" || v === undefined)){\n    msg.connValuesCorrect = false;\n} else{\n    msg.connValuesCorrect = true;\n}\n\nmsg.host = msg.connectionValues[0];\nmsg.port = msg.connectionValues[1];\nmsg.user = msg.connectionValues[2];\nmsg.pw = msg.connectionValues[3];\nmsg.database = msg.connectionValues[4];\nmsg.dbProvider = msg.connectionValues[5];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1450,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "4f03671861f54432",
        "type": "switch",
        "z": "8366aaf082e3436f",
        "name": "CheckForConnectionString",
        "property": "payload.conn",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            },
            {
                "t": "empty"
            },
            {
                "t": "istype",
                "v": "undefined",
                "vt": "undefined"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 480,
        "y": 260,
        "wires": [
            [
                "18e00f17fb85b948"
            ],
            [],
            []
        ]
    },
    {
        "id": "ddd4d9eb36b5b0f8",
        "type": "tab",
        "label": "Schema_Parser",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "844e03d37cd5de27",
        "type": "http in",
        "z": "ddd4d9eb36b5b0f8",
        "name": "",
        "url": "/get-schemas",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 420,
        "wires": [
            [
                "f32b8625ea357495"
            ]
        ]
    },
    {
        "id": "f761c826af998ac5",
        "type": "comment",
        "z": "ddd4d9eb36b5b0f8",
        "name": "Gets schemas based on the connection data",
        "info": "",
        "x": 170,
        "y": 300,
        "wires": []
    },
    {
        "id": "e1e575b9a40fc875",
        "type": "http in",
        "z": "ddd4d9eb36b5b0f8",
        "name": "",
        "url": "/get-schema-enums",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 1220,
        "wires": [
            [
                "e9583983f2b0f709"
            ]
        ]
    },
    {
        "id": "19eaf1d14b6a0922",
        "type": "comment",
        "z": "ddd4d9eb36b5b0f8",
        "name": "Gets a list of database objects stored in a database schema",
        "info": "",
        "x": 220,
        "y": 1100,
        "wires": []
    },
    {
        "id": "8cbf9716ed4f41ae",
        "type": "http in",
        "z": "ddd4d9eb36b5b0f8",
        "name": "",
        "url": "/get-db-object-information",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 1940,
        "wires": [
            [
                "205e174c4e8744ef"
            ]
        ]
    },
    {
        "id": "49d9cd0eae2411c5",
        "type": "comment",
        "z": "ddd4d9eb36b5b0f8",
        "name": "Gets the information about the database object based on the connection information and object name",
        "info": "",
        "x": 360,
        "y": 1820,
        "wires": []
    },
    {
        "id": "b069b65f1096c1f7",
        "type": "comment",
        "z": "ddd4d9eb36b5b0f8",
        "name": "{\"conn\":\"Host=host;Port=port;User=user;Pw=pw;Db=db;Provider=[mssql | postgres]\"}",
        "info": "",
        "x": 290,
        "y": 340,
        "wires": []
    },
    {
        "id": "a2e3ba10a300d2a3",
        "type": "http response",
        "z": "ddd4d9eb36b5b0f8",
        "name": "",
        "statusCode": "400",
        "headers": {},
        "x": 930,
        "y": 440,
        "wires": []
    },
    {
        "id": "ceb57a8e7098a0f5",
        "type": "function",
        "z": "ddd4d9eb36b5b0f8",
        "name": "CreateWrongKeysError",
        "func": "msg.payload = {\n    \"error\": \"Incorrect connection parameters detected!\"\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 440,
        "wires": [
            [
                "a2e3ba10a300d2a3"
            ]
        ]
    },
    {
        "id": "e011bed336e103d2",
        "type": "switch",
        "z": "ddd4d9eb36b5b0f8",
        "name": "CheckForConnectionValuesCorrectness",
        "property": "connValuesCorrect",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 770,
        "y": 360,
        "wires": [
            [
                "84cb9ee1dca1badd"
            ],
            [
                "85ffbeb1e6fb4ae9"
            ]
        ]
    },
    {
        "id": "85ffbeb1e6fb4ae9",
        "type": "function",
        "z": "ddd4d9eb36b5b0f8",
        "name": "CreateWrongValuesError",
        "func": "msg.payload = {\n    \"error\": \"Incorrect or empty connection values detected!\"\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 440,
        "wires": [
            [
                "6d7216cc49513878"
            ]
        ]
    },
    {
        "id": "6d7216cc49513878",
        "type": "http response",
        "z": "ddd4d9eb36b5b0f8",
        "name": "",
        "statusCode": "400",
        "headers": {},
        "x": 1370,
        "y": 440,
        "wires": []
    },
    {
        "id": "01411e7116ffc243",
        "type": "http response",
        "z": "ddd4d9eb36b5b0f8",
        "name": "",
        "statusCode": "400",
        "headers": {},
        "x": 1680,
        "y": 400,
        "wires": []
    },
    {
        "id": "f5ad0fa9df159234",
        "type": "function",
        "z": "ddd4d9eb36b5b0f8",
        "name": "CreateUnknownProviderError",
        "func": "msg.payload = {\n    \"error\": \"An unknown database management system was detected!\"\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1470,
        "y": 400,
        "wires": [
            [
                "01411e7116ffc243"
            ]
        ]
    },
    {
        "id": "eb8a3f7ad32a230f",
        "type": "comment",
        "z": "ddd4d9eb36b5b0f8",
        "name": "This subflow catches the errors",
        "info": "",
        "x": 410,
        "y": 60,
        "wires": []
    },
    {
        "id": "a5d65a7c2e47bbc9",
        "type": "catch",
        "z": "ddd4d9eb36b5b0f8",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 100,
        "y": 120,
        "wires": [
            [
                "1a1c78a79b72175e"
            ]
        ]
    },
    {
        "id": "1a1c78a79b72175e",
        "type": "function",
        "z": "ddd4d9eb36b5b0f8",
        "name": "CreateError",
        "func": "// Store the error message \n// in the payload property.\nmsg.payload = {\n    \"error\": msg.error.message\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 120,
        "wires": [
            [
                "0bb96587fd655e29"
            ]
        ]
    },
    {
        "id": "0bb96587fd655e29",
        "type": "http response",
        "z": "ddd4d9eb36b5b0f8",
        "name": "",
        "statusCode": 400,
        "headers": {},
        "x": 600,
        "y": 120,
        "wires": []
    },
    {
        "id": "729c1a5723a1adc3",
        "type": "postgresql",
        "z": "ddd4d9eb36b5b0f8",
        "name": "GetSchemas",
        "query": "SELECT schema_name\nFROM information_schema.schemata;",
        "postgreSQLConfig": "",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 2070,
        "y": 100,
        "wires": [
            [
                "1cd774c8f6a9a448"
            ]
        ]
    },
    {
        "id": "c27b6e0418d53df6",
        "type": "http response",
        "z": "ddd4d9eb36b5b0f8",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 2520,
        "y": 100,
        "wires": []
    },
    {
        "id": "c00c9e79184cbbaf",
        "type": "http response",
        "z": "ddd4d9eb36b5b0f8",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 2520,
        "y": 200,
        "wires": []
    },
    {
        "id": "a3680c27ba3591e5",
        "type": "function",
        "z": "ddd4d9eb36b5b0f8",
        "name": "GetSchemas (MSSQL)",
        "func": "const mssql = global.get('mssql');\n\nasync function query(){\n    try {\n      await mssql.connect(msg.mssqlConfig);\n      msg.payload = await mssql.query`SELECT SCHEMA_NAME FROM INFORMATION_SCHEMA.SCHEMATA`;\n      node.send(msg);\n    } catch (err) {\n      throw err;\n    } finally {\n      await mssql.close();\n    }\n  }\n\nawait query();",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2100,
        "y": 200,
        "wires": [
            [
                "5258b19992460cc9"
            ]
        ]
    },
    {
        "id": "02ae0df276522652",
        "type": "comment",
        "z": "ddd4d9eb36b5b0f8",
        "name": "It is not possible to set the connection dynamically for the MSSQL-PLUS node",
        "info": "",
        "x": 2250,
        "y": 160,
        "wires": []
    },
    {
        "id": "1cd774c8f6a9a448",
        "type": "function",
        "z": "ddd4d9eb36b5b0f8",
        "name": "StandardizeResponse",
        "func": "var dbResult = msg.payload;\nvar newResult = [];\n\nfor (let i = 0; i < dbResult.length; i++){\n    var name = dbResult[i].schema_name;\n    newResult.push({\"schemaName\": name});\n}\n\nmsg.payload = {\n    \"result\": newResult\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2300,
        "y": 100,
        "wires": [
            [
                "c27b6e0418d53df6"
            ]
        ]
    },
    {
        "id": "5258b19992460cc9",
        "type": "function",
        "z": "ddd4d9eb36b5b0f8",
        "name": "StandardizeResponse",
        "func": "var dbResult = msg.payload.recordset;\nvar newResult = [];\n\nfor (let i = 0; i < dbResult.length; i++){\n    var name = dbResult[i].SCHEMA_NAME;\n    newResult.push({\"schemaName\": name});\n}\n\nmsg.payload = {\n    \"result\": newResult\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2320,
        "y": 200,
        "wires": [
            [
                "c00c9e79184cbbaf"
            ]
        ]
    },
    {
        "id": "11cc8ca10dec5c18",
        "type": "comment",
        "z": "ddd4d9eb36b5b0f8",
        "name": "{\"conn\":\"Host=host;Port=port;User=user;Pw=pw;Db=db;Provider=[mssql | postgres]\", \"schema\" : \"schemaname\", \"dbObjectType\":\"dbobjecttype\"}",
        "info": "",
        "x": 480,
        "y": 1140,
        "wires": []
    },
    {
        "id": "f16d9c522a39e94d",
        "type": "function",
        "z": "ddd4d9eb36b5b0f8",
        "name": "CreateEmptyConnectionError",
        "func": "msg.payload = {\n    \"error\": \"The connection parameters were empty!\"\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 1460,
        "wires": [
            [
                "fd1db7451eeb4390"
            ]
        ]
    },
    {
        "id": "fd1db7451eeb4390",
        "type": "http response",
        "z": "ddd4d9eb36b5b0f8",
        "name": "",
        "statusCode": "400",
        "headers": {},
        "x": 1490,
        "y": 1460,
        "wires": []
    },
    {
        "id": "91eed856522676f5",
        "type": "function",
        "z": "ddd4d9eb36b5b0f8",
        "name": "CreateWrongKeysError",
        "func": "msg.payload = {\n    \"error\": \"Incorrect connection parameters detected!\"\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 1380,
        "wires": [
            [
                "60c04c24c4042020"
            ]
        ]
    },
    {
        "id": "f39cb57b4dd0f295",
        "type": "switch",
        "z": "ddd4d9eb36b5b0f8",
        "name": "CheckForConnectionValuesCorrectness",
        "property": "connValuesCorrect",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1220,
        "y": 1180,
        "wires": [
            [
                "66acf1bc9413d547"
            ],
            [
                "c3927a305f7ccb39"
            ]
        ]
    },
    {
        "id": "60c04c24c4042020",
        "type": "http response",
        "z": "ddd4d9eb36b5b0f8",
        "name": "",
        "statusCode": "400",
        "headers": {},
        "x": 1410,
        "y": 1380,
        "wires": []
    },
    {
        "id": "c3927a305f7ccb39",
        "type": "function",
        "z": "ddd4d9eb36b5b0f8",
        "name": "CreateWrongValuesError",
        "func": "msg.payload = {\n    \"error\": \"Incorrect or empty connection values detected!\"\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1380,
        "wires": [
            [
                "ec00e5408ccb705c"
            ]
        ]
    },
    {
        "id": "ec00e5408ccb705c",
        "type": "http response",
        "z": "ddd4d9eb36b5b0f8",
        "name": "",
        "statusCode": "400",
        "headers": {},
        "x": 1920,
        "y": 1380,
        "wires": []
    },
    {
        "id": "cab005a332a006ce",
        "type": "function",
        "z": "ddd4d9eb36b5b0f8",
        "name": "CreateUnknownProviderError",
        "func": "msg.payload = {\n    \"error\": \"An unknown database management system was detected!\"\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1890,
        "y": 1200,
        "wires": [
            [
                "42bc61e43bbff37e"
            ]
        ]
    },
    {
        "id": "42bc61e43bbff37e",
        "type": "http response",
        "z": "ddd4d9eb36b5b0f8",
        "name": "",
        "statusCode": "400",
        "headers": {},
        "x": 2140,
        "y": 1200,
        "wires": []
    },
    {
        "id": "addaca5aa396a0bb",
        "type": "http response",
        "z": "ddd4d9eb36b5b0f8",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 3460,
        "y": 900,
        "wires": []
    },
    {
        "id": "3d8036ce52100827",
        "type": "function",
        "z": "ddd4d9eb36b5b0f8",
        "name": "CreateEmptyConnectionError",
        "func": "msg.payload = {\n    \"error\": \"The connection parameters were empty!\"\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1410,
        "y": 2000,
        "wires": [
            [
                "c15901f9f8ede26f"
            ]
        ]
    },
    {
        "id": "c15901f9f8ede26f",
        "type": "http response",
        "z": "ddd4d9eb36b5b0f8",
        "name": "",
        "statusCode": "400",
        "headers": {},
        "x": 1620,
        "y": 2000,
        "wires": []
    },
    {
        "id": "2961dcaaf45bc82c",
        "type": "function",
        "z": "ddd4d9eb36b5b0f8",
        "name": "CreateWrongKeysError",
        "func": "msg.payload = {\n    \"error\": \"Incorrect connection parameters detected!\"\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1390,
        "y": 1940,
        "wires": [
            [
                "5b37f0f235934aa0"
            ]
        ]
    },
    {
        "id": "5b37f0f235934aa0",
        "type": "http response",
        "z": "ddd4d9eb36b5b0f8",
        "name": "",
        "statusCode": "400",
        "headers": {},
        "x": 1600,
        "y": 1940,
        "wires": []
    },
    {
        "id": "e2b563afd1175283",
        "type": "switch",
        "z": "ddd4d9eb36b5b0f8",
        "name": "CheckForConnectionValuesCorrectness",
        "property": "connValuesCorrect",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1460,
        "y": 1860,
        "wires": [
            [
                "6ca759dec44754ba"
            ],
            [
                "bccfa14d697b26ea"
            ]
        ]
    },
    {
        "id": "bccfa14d697b26ea",
        "type": "function",
        "z": "ddd4d9eb36b5b0f8",
        "name": "CreateWrongValuesError",
        "func": "msg.payload = {\n    \"error\": \"Incorrect or empty connection values detected!\"\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1790,
        "y": 1920,
        "wires": [
            [
                "e2669c961d7ca751"
            ]
        ]
    },
    {
        "id": "e2669c961d7ca751",
        "type": "http response",
        "z": "ddd4d9eb36b5b0f8",
        "name": "",
        "statusCode": "400",
        "headers": {},
        "x": 2000,
        "y": 1920,
        "wires": []
    },
    {
        "id": "aeef63cb3824aa8a",
        "type": "comment",
        "z": "ddd4d9eb36b5b0f8",
        "name": "{\"conn\":\"Host=host;Port=port;User=user;Pw=pw;Db=db;Provider=[mssql | postgres]\", \"schema\" : \"schemaname\", \"dbObjectType\":\"dbobjecttype\", \"dbObjectName\":\"dbobjectname\"}",
        "info": "",
        "x": 600,
        "y": 1860,
        "wires": []
    },
    {
        "id": "f32b8625ea357495",
        "type": "subflow:8366aaf082e3436f",
        "z": "ddd4d9eb36b5b0f8",
        "name": "",
        "x": 410,
        "y": 420,
        "wires": [
            [
                "e011bed336e103d2"
            ],
            [
                "ceb57a8e7098a0f5"
            ],
            [
                "1adee0f83cdf818d"
            ]
        ]
    },
    {
        "id": "f722ad2d35562a71",
        "type": "subflow:8366aaf082e3436f",
        "z": "ddd4d9eb36b5b0f8",
        "name": "",
        "x": 870,
        "y": 1220,
        "wires": [
            [
                "f39cb57b4dd0f295"
            ],
            [
                "91eed856522676f5"
            ],
            [
                "f16d9c522a39e94d"
            ]
        ]
    },
    {
        "id": "2b7061926cc988a5",
        "type": "subflow:ac9dc272f4af2a33",
        "z": "ddd4d9eb36b5b0f8",
        "name": "GetDbObjects",
        "x": 3280,
        "y": 900,
        "wires": [
            [
                "addaca5aa396a0bb"
            ]
        ]
    },
    {
        "id": "74857130aac6804f",
        "type": "subflow:8366aaf082e3436f",
        "z": "ddd4d9eb36b5b0f8",
        "name": "",
        "x": 1130,
        "y": 1940,
        "wires": [
            [
                "e2b563afd1175283"
            ],
            [
                "2961dcaaf45bc82c"
            ],
            [
                "3d8036ce52100827"
            ]
        ]
    },
    {
        "id": "631772358e1d86c4",
        "type": "function",
        "z": "ddd4d9eb36b5b0f8",
        "name": "CreateUnknownProviderError",
        "func": "msg.payload = {\n    \"error\": \"An unknown database management system was detected!\"\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2150,
        "y": 1880,
        "wires": [
            [
                "c364fc359d942cb5"
            ]
        ]
    },
    {
        "id": "c364fc359d942cb5",
        "type": "http response",
        "z": "ddd4d9eb36b5b0f8",
        "name": "",
        "statusCode": "400",
        "headers": {},
        "x": 2380,
        "y": 1880,
        "wires": []
    },
    {
        "id": "18a0ae8ee7d23cae",
        "type": "switch",
        "z": "ddd4d9eb36b5b0f8",
        "name": "DbObjectType",
        "property": "dbObjectType",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "table",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "view",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "strp",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "function",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 3720,
        "y": 1420,
        "wires": [
            [
                "af15c6d774650cd8"
            ],
            [
                "9c547f7e296e3a6e"
            ],
            [
                "8c6cb1d155cb4795"
            ],
            [
                "5606b74ec54410ef"
            ]
        ]
    },
    {
        "id": "b4cb34a646ee1d55",
        "type": "http response",
        "z": "ddd4d9eb36b5b0f8",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 4940,
        "y": 1320,
        "wires": []
    },
    {
        "id": "ef71c76b4be3cddd",
        "type": "subflow:ce3537f37c72e32b",
        "z": "ddd4d9eb36b5b0f8",
        "name": "",
        "x": 4500,
        "y": 1320,
        "wires": [
            [
                "fc982909b56ff18d"
            ]
        ]
    },
    {
        "id": "cc7bea262ff22af8",
        "type": "subflow:65ace00d8439925e",
        "z": "ddd4d9eb36b5b0f8",
        "name": "",
        "x": 4490,
        "y": 1420,
        "wires": [
            [
                "d53128fff971fb89"
            ]
        ]
    },
    {
        "id": "c58b2b8c5e0b6fdd",
        "type": "http response",
        "z": "ddd4d9eb36b5b0f8",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 4890,
        "y": 1420,
        "wires": []
    },
    {
        "id": "447b5833bebdf3a3",
        "type": "http response",
        "z": "ddd4d9eb36b5b0f8",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 4740,
        "y": 1620,
        "wires": []
    },
    {
        "id": "7a44d66ab5431228",
        "type": "http response",
        "z": "ddd4d9eb36b5b0f8",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 4720,
        "y": 1520,
        "wires": []
    },
    {
        "id": "aa31731483d9df19",
        "type": "function",
        "z": "ddd4d9eb36b5b0f8",
        "name": "CreateWrongDbObjectTypeError",
        "func": "msg.payload = {\n    \"error\": \"An unknown database object type was detected!\"\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3310,
        "y": 1020,
        "wires": [
            [
                "e6671e73b8f1d557"
            ]
        ]
    },
    {
        "id": "e6671e73b8f1d557",
        "type": "http response",
        "z": "ddd4d9eb36b5b0f8",
        "name": "",
        "statusCode": "400",
        "headers": {},
        "x": 3540,
        "y": 1020,
        "wires": []
    },
    {
        "id": "2c26c23244bc3c3e",
        "type": "subflow:700c49c23ddc27cc",
        "z": "ddd4d9eb36b5b0f8",
        "name": "",
        "x": 3020,
        "y": 960,
        "wires": [
            [
                "2b7061926cc988a5"
            ],
            [
                "64b2173814627208"
            ],
            [
                "aa31731483d9df19"
            ]
        ]
    },
    {
        "id": "e9583983f2b0f709",
        "type": "function",
        "z": "ddd4d9eb36b5b0f8",
        "name": "StoreSchemaToMsg",
        "func": "msg.schema = msg.req.body.schema;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 1220,
        "wires": [
            [
                "b24205e508d638ad"
            ]
        ]
    },
    {
        "id": "b24205e508d638ad",
        "type": "function",
        "z": "ddd4d9eb36b5b0f8",
        "name": "StoreDbObjectTypeToMsg",
        "func": "msg.dbObjectType = msg.req.body.dbObjectType;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 1220,
        "wires": [
            [
                "f722ad2d35562a71"
            ]
        ]
    },
    {
        "id": "7d4c8513f9e1db13",
        "type": "subflow:83359f6b9b1c7459",
        "z": "ddd4d9eb36b5b0f8",
        "name": "",
        "x": 2380,
        "y": 960,
        "wires": [
            [
                "2c26c23244bc3c3e"
            ],
            [
                "c6ec8ea41ec5badb"
            ],
            [
                "cae3c93900501a16"
            ]
        ]
    },
    {
        "id": "c6ec8ea41ec5badb",
        "type": "function",
        "z": "ddd4d9eb36b5b0f8",
        "name": "CreateNonExistentSchemaError",
        "func": "msg.payload = {\n    \"error\": \"The schema was not recognized!\"\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2810,
        "y": 1060,
        "wires": [
            [
                "ccbd91e27ff6b829"
            ]
        ]
    },
    {
        "id": "ccbd91e27ff6b829",
        "type": "http response",
        "z": "ddd4d9eb36b5b0f8",
        "name": "",
        "statusCode": "400",
        "headers": {},
        "x": 3080,
        "y": 1060,
        "wires": []
    },
    {
        "id": "205e174c4e8744ef",
        "type": "function",
        "z": "ddd4d9eb36b5b0f8",
        "name": "StoreSchemaToMsg",
        "func": "msg.schema = msg.req.body.schema;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 1940,
        "wires": [
            [
                "cefe78d45f1199e8"
            ]
        ]
    },
    {
        "id": "cefe78d45f1199e8",
        "type": "function",
        "z": "ddd4d9eb36b5b0f8",
        "name": "StoreDbObjectTypeToMsg",
        "func": "msg.dbObjectType = msg.req.body.dbObjectType;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 1940,
        "wires": [
            [
                "a1b9a9c238a5a680"
            ]
        ]
    },
    {
        "id": "a1b9a9c238a5a680",
        "type": "function",
        "z": "ddd4d9eb36b5b0f8",
        "name": "StoreDbObjectNameToMsg",
        "func": "msg.dbObjectName = msg.req.body.dbObjectName;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 1940,
        "wires": [
            [
                "74857130aac6804f"
            ]
        ]
    },
    {
        "id": "c6d2b8689deba829",
        "type": "subflow:700c49c23ddc27cc",
        "z": "ddd4d9eb36b5b0f8",
        "name": "",
        "x": 2840,
        "y": 1460,
        "wires": [
            [
                "234570637d1fcc3e"
            ],
            [
                "9c88ab09dccc6468"
            ],
            [
                "5a0b934a097bcb3e"
            ]
        ]
    },
    {
        "id": "5a0b934a097bcb3e",
        "type": "function",
        "z": "ddd4d9eb36b5b0f8",
        "name": "CreateWrongDbObjectTypeError",
        "func": "msg.payload = {\n    \"error\": \"An unknown database object type was detected!\"\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3240,
        "y": 1600,
        "wires": [
            [
                "d9c50686348c07bf"
            ]
        ]
    },
    {
        "id": "d9c50686348c07bf",
        "type": "http response",
        "z": "ddd4d9eb36b5b0f8",
        "name": "",
        "statusCode": "400",
        "headers": {},
        "x": 3450,
        "y": 1600,
        "wires": []
    },
    {
        "id": "e673a8a6aaf38fa1",
        "type": "function",
        "z": "ddd4d9eb36b5b0f8",
        "name": "CreateNonExistentSchemaError",
        "func": "msg.payload = {\n    \"error\": \"The schema was not recognized!\"\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2870,
        "y": 1640,
        "wires": [
            [
                "899a65fa646c11ae"
            ]
        ]
    },
    {
        "id": "899a65fa646c11ae",
        "type": "http response",
        "z": "ddd4d9eb36b5b0f8",
        "name": "",
        "statusCode": "400",
        "headers": {},
        "x": 3100,
        "y": 1640,
        "wires": []
    },
    {
        "id": "ce99a4ce27f8c258",
        "type": "subflow:83359f6b9b1c7459",
        "z": "ddd4d9eb36b5b0f8",
        "name": "",
        "x": 2460,
        "y": 1560,
        "wires": [
            [
                "c6d2b8689deba829"
            ],
            [
                "e673a8a6aaf38fa1"
            ],
            [
                "2104ec039104fee3"
            ]
        ]
    },
    {
        "id": "6ad36ae221e2eee0",
        "type": "subflow:d135cb27637ed1f7",
        "z": "ddd4d9eb36b5b0f8",
        "name": "",
        "x": 4300,
        "y": 1320,
        "wires": [
            [
                "ef71c76b4be3cddd"
            ],
            [
                "cc307e92fe22657a"
            ]
        ]
    },
    {
        "id": "cc307e92fe22657a",
        "type": "function",
        "z": "ddd4d9eb36b5b0f8",
        "name": "CreateNoTablesError",
        "func": "msg.payload = {\n    \"error\": \"Table does not exist!\"\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4520,
        "y": 1380,
        "wires": [
            [
                "f1fb2d72d2838bef"
            ]
        ]
    },
    {
        "id": "f1fb2d72d2838bef",
        "type": "http response",
        "z": "ddd4d9eb36b5b0f8",
        "name": "",
        "statusCode": "400",
        "headers": {},
        "x": 4780,
        "y": 1380,
        "wires": []
    },
    {
        "id": "39e53683b877a9f3",
        "type": "subflow:f03204506d037819",
        "z": "ddd4d9eb36b5b0f8",
        "name": "",
        "x": 4300,
        "y": 1420,
        "wires": [
            [
                "cc7bea262ff22af8"
            ],
            [
                "a72d0807cc63bef4"
            ]
        ]
    },
    {
        "id": "a72d0807cc63bef4",
        "type": "function",
        "z": "ddd4d9eb36b5b0f8",
        "name": "CreateNoViewsError",
        "func": "msg.payload = {\n    \"error\" : \"View does not exist!\"\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4520,
        "y": 1480,
        "wires": [
            [
                "4b1c8b4ce3e896da"
            ]
        ]
    },
    {
        "id": "4b1c8b4ce3e896da",
        "type": "http response",
        "z": "ddd4d9eb36b5b0f8",
        "name": "",
        "statusCode": "400",
        "headers": {},
        "x": 4780,
        "y": 1480,
        "wires": []
    },
    {
        "id": "709481b26c1e0135",
        "type": "function",
        "z": "ddd4d9eb36b5b0f8",
        "name": "CreateNoProceduresError",
        "func": "msg.payload = {\n    \"error\": \"Procedure does not exist!\"\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4550,
        "y": 1580,
        "wires": [
            [
                "a28191fcd101bf87"
            ]
        ]
    },
    {
        "id": "a28191fcd101bf87",
        "type": "http response",
        "z": "ddd4d9eb36b5b0f8",
        "name": "",
        "statusCode": "400",
        "headers": {},
        "x": 4780,
        "y": 1580,
        "wires": []
    },
    {
        "id": "f3c67e324511506e",
        "type": "subflow:14f40821ce7b1a4f",
        "z": "ddd4d9eb36b5b0f8",
        "name": "",
        "x": 4290,
        "y": 1520,
        "wires": [
            [
                "2e4fa42f969f687b"
            ],
            [
                "709481b26c1e0135"
            ]
        ]
    },
    {
        "id": "5adc501efddb01d2",
        "type": "function",
        "z": "ddd4d9eb36b5b0f8",
        "name": "CreateNoFunctionsError",
        "func": "msg.payload = {\n    \"error\": \"Function does not exist!\"\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4550,
        "y": 1680,
        "wires": [
            [
                "f9edd56639bdc05b"
            ]
        ]
    },
    {
        "id": "f9edd56639bdc05b",
        "type": "http response",
        "z": "ddd4d9eb36b5b0f8",
        "name": "",
        "statusCode": "400",
        "headers": {},
        "x": 4780,
        "y": 1680,
        "wires": []
    },
    {
        "id": "2cda643c702b3008",
        "type": "subflow:6192a3e917c65f72",
        "z": "ddd4d9eb36b5b0f8",
        "name": "",
        "x": 4290,
        "y": 1620,
        "wires": [
            [
                "ad96670f69a10889"
            ],
            [
                "5adc501efddb01d2"
            ]
        ]
    },
    {
        "id": "0040f11745e8039d",
        "type": "http in",
        "z": "ddd4d9eb36b5b0f8",
        "name": "",
        "url": "/get-db-provider",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 860,
        "wires": [
            [
                "e1baf63dfcf81b0f"
            ]
        ]
    },
    {
        "id": "8fa861e244cdfa71",
        "type": "comment",
        "z": "ddd4d9eb36b5b0f8",
        "name": "Gets the database provider on the connection data",
        "info": "",
        "x": 210,
        "y": 780,
        "wires": []
    },
    {
        "id": "b8f4f4c62d923cf8",
        "type": "comment",
        "z": "ddd4d9eb36b5b0f8",
        "name": "{\"conn\":\"Host=host;Port=port;User=user;Pw=pw;Db=db\"}",
        "info": "",
        "x": 230,
        "y": 820,
        "wires": []
    },
    {
        "id": "cce57a5bd3828ccb",
        "type": "function",
        "z": "ddd4d9eb36b5b0f8",
        "name": "CreateEmptyConnectionError",
        "func": "msg.payload = {\n    \"error\": \"The connection parameters were empty!\"\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 960,
        "wires": [
            [
                "ac203cde0ee6d376"
            ]
        ]
    },
    {
        "id": "ac203cde0ee6d376",
        "type": "http response",
        "z": "ddd4d9eb36b5b0f8",
        "name": "",
        "statusCode": "400",
        "headers": {},
        "x": 980,
        "y": 960,
        "wires": []
    },
    {
        "id": "714ad00d29d86ecc",
        "type": "function",
        "z": "ddd4d9eb36b5b0f8",
        "name": "CreateWrongKeysError",
        "func": "msg.payload = {\n    \"error\": \"Incorrect connection parameters detected!\"\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 880,
        "wires": [
            [
                "c7485797427646d8"
            ]
        ]
    },
    {
        "id": "d0847c135149306c",
        "type": "switch",
        "z": "ddd4d9eb36b5b0f8",
        "name": "CheckForConnectionValuesCorrectness",
        "property": "connValuesCorrect",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 790,
        "y": 800,
        "wires": [
            [
                "9d021c9c710dc6b2"
            ],
            [
                "fd15a3c5013b4d5b"
            ]
        ]
    },
    {
        "id": "c7485797427646d8",
        "type": "http response",
        "z": "ddd4d9eb36b5b0f8",
        "name": "",
        "statusCode": "400",
        "headers": {},
        "x": 950,
        "y": 880,
        "wires": []
    },
    {
        "id": "fd15a3c5013b4d5b",
        "type": "function",
        "z": "ddd4d9eb36b5b0f8",
        "name": "CreateWrongValuesError",
        "func": "msg.payload = {\n    \"error\": \"Incorrect or empty connection values detected!\"\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 880,
        "wires": [
            [
                "b25d6e0ecc138909"
            ]
        ]
    },
    {
        "id": "fd58b43a3d941ef7",
        "type": "function",
        "z": "ddd4d9eb36b5b0f8",
        "name": "CreateUnknownProviderError",
        "func": "msg.payload = {\n    \"error\": \"An unknown database management system was detected!\"\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1590,
        "y": 820,
        "wires": [
            [
                "48d56cb4e40e5fd4"
            ]
        ]
    },
    {
        "id": "48d56cb4e40e5fd4",
        "type": "http response",
        "z": "ddd4d9eb36b5b0f8",
        "name": "",
        "statusCode": "400",
        "headers": {},
        "x": 1820,
        "y": 820,
        "wires": []
    },
    {
        "id": "5d17b14b20248354",
        "type": "function",
        "z": "ddd4d9eb36b5b0f8",
        "name": "StandardizeResponse",
        "func": "msg.payload = {\n    \"result\": [\"postgres\"]\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1560,
        "y": 680,
        "wires": [
            [
                "a159868c1b0ac319"
            ]
        ]
    },
    {
        "id": "67175b0c021cc8f0",
        "type": "function",
        "z": "ddd4d9eb36b5b0f8",
        "name": "StandardizeResponse",
        "func": "msg.payload = {\n    \"result\": [\"mssql\"]\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1560,
        "y": 760,
        "wires": [
            [
                "60723c427534520e"
            ]
        ]
    },
    {
        "id": "60723c427534520e",
        "type": "http response",
        "z": "ddd4d9eb36b5b0f8",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 1820,
        "y": 760,
        "wires": []
    },
    {
        "id": "a159868c1b0ac319",
        "type": "http response",
        "z": "ddd4d9eb36b5b0f8",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 1820,
        "y": 680,
        "wires": []
    },
    {
        "id": "af15c6d774650cd8",
        "type": "function",
        "z": "ddd4d9eb36b5b0f8",
        "name": "SetTableName",
        "func": "msg.tableName = msg.dbObjectName;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4080,
        "y": 1340,
        "wires": [
            [
                "6ad36ae221e2eee0"
            ]
        ]
    },
    {
        "id": "9c547f7e296e3a6e",
        "type": "function",
        "z": "ddd4d9eb36b5b0f8",
        "name": "SetViewName",
        "func": "msg.viewName = msg.dbObjectName;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4060,
        "y": 1440,
        "wires": [
            [
                "39e53683b877a9f3"
            ]
        ]
    },
    {
        "id": "8c6cb1d155cb4795",
        "type": "function",
        "z": "ddd4d9eb36b5b0f8",
        "name": "SetProcedureName",
        "func": "msg.procName = msg.dbObjectName;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4070,
        "y": 1500,
        "wires": [
            [
                "f3c67e324511506e"
            ]
        ]
    },
    {
        "id": "5606b74ec54410ef",
        "type": "function",
        "z": "ddd4d9eb36b5b0f8",
        "name": "SetFunctionName",
        "func": "msg.funcName = msg.dbObjectName;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4070,
        "y": 1620,
        "wires": [
            [
                "2cda643c702b3008"
            ]
        ]
    },
    {
        "id": "fc982909b56ff18d",
        "type": "function",
        "z": "ddd4d9eb36b5b0f8",
        "name": "StandardizeResponse",
        "func": "var response = msg.payload;\nmsg.payload = {\n    \"result\": [response]\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4720,
        "y": 1320,
        "wires": [
            [
                "b4cb34a646ee1d55"
            ]
        ]
    },
    {
        "id": "d53128fff971fb89",
        "type": "function",
        "z": "ddd4d9eb36b5b0f8",
        "name": "StandardizeResponse",
        "func": "var response = msg.payload;\nmsg.payload = {\n    \"result\": [response]\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4700,
        "y": 1420,
        "wires": [
            [
                "c58b2b8c5e0b6fdd"
            ]
        ]
    },
    {
        "id": "2e4fa42f969f687b",
        "type": "function",
        "z": "ddd4d9eb36b5b0f8",
        "name": "StandardizeResponse",
        "func": "var response = msg.payload;\nmsg.payload = {\n    \"result\": [{\n        \"name\": msg.procName,\n        \"schema\": msg.schema\n    }]\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4520,
        "y": 1520,
        "wires": [
            [
                "7a44d66ab5431228"
            ]
        ]
    },
    {
        "id": "ad96670f69a10889",
        "type": "function",
        "z": "ddd4d9eb36b5b0f8",
        "name": "StandardizeResponse",
        "func": "var response = msg.payload;\nmsg.payload = {\n    \"result\": [{\n        \"name\": msg.funcName,\n        \"schema\": msg.schema\n    }]\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4540,
        "y": 1620,
        "wires": [
            [
                "447b5833bebdf3a3"
            ]
        ]
    },
    {
        "id": "1adee0f83cdf818d",
        "type": "function",
        "z": "ddd4d9eb36b5b0f8",
        "name": "CreateEmptyConnectionError",
        "func": "msg.payload = {\n    \"error\": \"The connection parameters were empty!\"\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 520,
        "wires": [
            [
                "66010e6ff08c990b"
            ]
        ]
    },
    {
        "id": "66010e6ff08c990b",
        "type": "http response",
        "z": "ddd4d9eb36b5b0f8",
        "name": "",
        "statusCode": "400",
        "headers": {},
        "x": 960,
        "y": 520,
        "wires": []
    },
    {
        "id": "cae3c93900501a16",
        "type": "function",
        "z": "ddd4d9eb36b5b0f8",
        "name": "CreateEmptySchemaError",
        "func": "msg.payload = {\n    \"error\": \"The name of the schema was empty!\"\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2820,
        "y": 1140,
        "wires": [
            [
                "93f8cae726699a53"
            ]
        ]
    },
    {
        "id": "93f8cae726699a53",
        "type": "http response",
        "z": "ddd4d9eb36b5b0f8",
        "name": "",
        "statusCode": "400",
        "headers": {},
        "x": 3060,
        "y": 1140,
        "wires": []
    },
    {
        "id": "64b2173814627208",
        "type": "function",
        "z": "ddd4d9eb36b5b0f8",
        "name": "CreateEmptyDbObjectTypeError",
        "func": "msg.payload = {\n    \"error\": \"The database object type was empty!\"\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3310,
        "y": 960,
        "wires": [
            [
                "0f64906557312f53"
            ]
        ]
    },
    {
        "id": "0f64906557312f53",
        "type": "http response",
        "z": "ddd4d9eb36b5b0f8",
        "name": "",
        "statusCode": "400",
        "headers": {},
        "x": 3540,
        "y": 960,
        "wires": []
    },
    {
        "id": "9c88ab09dccc6468",
        "type": "function",
        "z": "ddd4d9eb36b5b0f8",
        "name": "CreateEmptyDbObjectTypeError",
        "func": "msg.payload = {\n    \"error\": \"The database object type was empty!\"\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3240,
        "y": 1540,
        "wires": [
            [
                "77a6dc227ca87fb8"
            ]
        ]
    },
    {
        "id": "77a6dc227ca87fb8",
        "type": "http response",
        "z": "ddd4d9eb36b5b0f8",
        "name": "",
        "statusCode": "400",
        "headers": {},
        "x": 3460,
        "y": 1540,
        "wires": []
    },
    {
        "id": "2104ec039104fee3",
        "type": "function",
        "z": "ddd4d9eb36b5b0f8",
        "name": "CreateEmptySchemaError",
        "func": "msg.payload = {\n    \"error\": \"The name of the schema was empty!\"\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2880,
        "y": 1720,
        "wires": [
            [
                "d89b7de99971de5f"
            ]
        ]
    },
    {
        "id": "d89b7de99971de5f",
        "type": "http response",
        "z": "ddd4d9eb36b5b0f8",
        "name": "",
        "statusCode": "400",
        "headers": {},
        "x": 3100,
        "y": 1720,
        "wires": []
    },
    {
        "id": "234570637d1fcc3e",
        "type": "subflow:e75ce79db26486a2",
        "z": "ddd4d9eb36b5b0f8",
        "name": "",
        "x": 3180,
        "y": 1440,
        "wires": [
            [
                "18a0ae8ee7d23cae"
            ],
            [
                "6ca370854576a7ca"
            ]
        ]
    },
    {
        "id": "6ca370854576a7ca",
        "type": "function",
        "z": "ddd4d9eb36b5b0f8",
        "name": "CreateEmptyDbObjectNameError",
        "func": "msg.payload = {\n    \"error\": \"Empty object name detected!\"\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3490,
        "y": 1500,
        "wires": [
            [
                "4b251317355f9b02"
            ]
        ]
    },
    {
        "id": "4b251317355f9b02",
        "type": "http response",
        "z": "ddd4d9eb36b5b0f8",
        "name": "",
        "statusCode": "400",
        "headers": {},
        "x": 3710,
        "y": 1500,
        "wires": []
    },
    {
        "id": "b25d6e0ecc138909",
        "type": "http response",
        "z": "ddd4d9eb36b5b0f8",
        "name": "",
        "statusCode": "400",
        "headers": {},
        "x": 1400,
        "y": 880,
        "wires": []
    },
    {
        "id": "05c3720a1d94fa8f",
        "type": "comment",
        "z": "ddd4d9eb36b5b0f8",
        "name": "\"dbObjectType\" : \"table\" | \"view\" | \"function\" | \"strp\"",
        "info": "",
        "x": 190,
        "y": 1180,
        "wires": []
    },
    {
        "id": "4c7b8fe59067f77f",
        "type": "comment",
        "z": "ddd4d9eb36b5b0f8",
        "name": "\"dbObjectType\" : \"table\" | \"view\" | \"function\" | \"strp\"",
        "info": "",
        "x": 210,
        "y": 1900,
        "wires": []
    },
    {
        "id": "84cb9ee1dca1badd",
        "type": "subflow:02aa7986ab49c73f",
        "z": "ddd4d9eb36b5b0f8",
        "name": "",
        "x": 1160,
        "y": 280,
        "wires": [
            [
                "b4997b072a961c9e"
            ],
            [
                "f5ad0fa9df159234"
            ]
        ]
    },
    {
        "id": "e1baf63dfcf81b0f",
        "type": "subflow:6ab50c85ca606a95",
        "z": "ddd4d9eb36b5b0f8",
        "name": "",
        "x": 400,
        "y": 860,
        "wires": [
            [
                "d0847c135149306c"
            ],
            [
                "714ad00d29d86ecc"
            ],
            [
                "cce57a5bd3828ccb"
            ]
        ]
    },
    {
        "id": "6ca759dec44754ba",
        "type": "subflow:02aa7986ab49c73f",
        "z": "ddd4d9eb36b5b0f8",
        "name": "",
        "x": 1820,
        "y": 1800,
        "wires": [
            [
                "5d4f8312a3022a34"
            ],
            [
                "631772358e1d86c4"
            ]
        ]
    },
    {
        "id": "9d021c9c710dc6b2",
        "type": "function",
        "z": "ddd4d9eb36b5b0f8",
        "name": "GetDbProvider",
        "func": "const pg = global.get('pg');\nconst mssql = global.get('mssql');\n\nvar host = msg.host;\nvar port = msg.port;\nvar database = msg.database;\nvar user = msg.user;\nvar password = msg.pw;\n\n\nconst pgConfig = {\n  user: user,\n  database: database,\n  password: password,\n  host: host,\n  port: port,  \n};\n\nmsg.pgConfig = pgConfig;\n\nconst mssqlConfig = {\n  user: user,\n  password: password,\n  server: host,\n  port: parseInt(port),\n  database: database,\n  options: {\n    trustedConnection: true,\n    encrypt: false,\n    enableArithAbort: true,\n    trustServerCertificate: true,\n\n  }\n};\n\nmsg.mssqlConfig = mssqlConfig;\n\nconst testPgConnection = async () => {\n    const client = new pg.Client(pgConfig);\n    try {\n      await client.connect();\n      console.log(\"Successfully connected to PostgreSQL database\");\n    } catch (err) {\n      console.error(\"Error connecting to PostgreSQL database\");\n      throw err;\n    } finally {\n      await client.end();\n    }\n  };\n  \n  const testMssqlConnection = async () => {\n    try {\n      await mssql.connect(mssqlConfig);\n      console.log(\"Successfully connected to MSSQL database\");\n    } catch (err) {\n      console.error(\"Error connecting to MSSQL database\");\n      await mssql.close();\n      throw err;\n    } finally {\n      await mssql.close();\n    }\n  };\n\n  testPgConnection()\n    .then(() => {\n      msg.dbProvider = \"postgres\";\n      node.send(msg)\n    }, (error) => {\n      return new Promise((resolve, reject) => {\n        testMssqlConnection().then(() => {\n          msg.dbProvider = \"mssql\";\n          resolve();\n          node.send(msg);\n        }, (error) => {\n          msg.dbProvider = \"noconnection\";\n          node.send(msg);\n        })\n      });\n    });",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 760,
        "wires": [
            [
                "d64a4303c81445a4"
            ]
        ]
    },
    {
        "id": "b4997b072a961c9e",
        "type": "subflow:3a440fbe92149fc9",
        "z": "ddd4d9eb36b5b0f8",
        "name": "",
        "x": 1560,
        "y": 280,
        "wires": [
            [
                "d1e7c8967fd50eb7"
            ],
            [
                "7cc808eac8659cc2"
            ],
            [
                "7e47d6bc8138dad7"
            ]
        ]
    },
    {
        "id": "7e47d6bc8138dad7",
        "type": "function",
        "z": "ddd4d9eb36b5b0f8",
        "name": "CreateUnknownProviderError",
        "func": "msg.payload = {\n    \"error\": \"An unknown database management system was detected!\"\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1930,
        "y": 420,
        "wires": [
            [
                "8a479f5c98b4ac15"
            ]
        ]
    },
    {
        "id": "8a479f5c98b4ac15",
        "type": "http response",
        "z": "ddd4d9eb36b5b0f8",
        "name": "",
        "statusCode": "400",
        "headers": {},
        "x": 2160,
        "y": 420,
        "wires": []
    },
    {
        "id": "7cc808eac8659cc2",
        "type": "function",
        "z": "ddd4d9eb36b5b0f8",
        "name": "CreateConnectionError",
        "func": "msg.payload = {\n    \"error\": \"No connection to the database could be detected!\"\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1910,
        "y": 360,
        "wires": [
            [
                "4faa341de0ef61e3"
            ]
        ]
    },
    {
        "id": "4faa341de0ef61e3",
        "type": "http response",
        "z": "ddd4d9eb36b5b0f8",
        "name": "",
        "statusCode": "400",
        "headers": {},
        "x": 2160,
        "y": 360,
        "wires": []
    },
    {
        "id": "7025c9a66108635a",
        "type": "subflow:3a440fbe92149fc9",
        "z": "ddd4d9eb36b5b0f8",
        "name": "",
        "x": 2040,
        "y": 1080,
        "wires": [
            [
                "7d4c8513f9e1db13"
            ],
            [
                "33f4b4943e1c3859"
            ],
            [
                "18305a3dd73ebc14"
            ]
        ]
    },
    {
        "id": "33f4b4943e1c3859",
        "type": "function",
        "z": "ddd4d9eb36b5b0f8",
        "name": "CreateConnectionError",
        "func": "msg.payload = {\n    \"error\": \"No connection to the database could be detected!\"\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2390,
        "y": 1180,
        "wires": [
            [
                "08146db3b1865f12"
            ]
        ]
    },
    {
        "id": "18305a3dd73ebc14",
        "type": "function",
        "z": "ddd4d9eb36b5b0f8",
        "name": "CreateUnknownProviderError",
        "func": "msg.payload = {\n    \"error\": \"An unknown database management system was detected!\"\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2410,
        "y": 1240,
        "wires": [
            [
                "3430ae50f00b1455"
            ]
        ]
    },
    {
        "id": "08146db3b1865f12",
        "type": "http response",
        "z": "ddd4d9eb36b5b0f8",
        "name": "",
        "statusCode": "400",
        "headers": {},
        "x": 2640,
        "y": 1180,
        "wires": []
    },
    {
        "id": "3430ae50f00b1455",
        "type": "http response",
        "z": "ddd4d9eb36b5b0f8",
        "name": "",
        "statusCode": "400",
        "headers": {},
        "x": 2640,
        "y": 1240,
        "wires": []
    },
    {
        "id": "5d4f8312a3022a34",
        "type": "subflow:3a440fbe92149fc9",
        "z": "ddd4d9eb36b5b0f8",
        "name": "",
        "x": 2120,
        "y": 1780,
        "wires": [
            [
                "ce99a4ce27f8c258"
            ],
            [
                "dd8fd0a1665f8833"
            ],
            [
                "f3086f520eb225f7"
            ]
        ]
    },
    {
        "id": "dd8fd0a1665f8833",
        "type": "function",
        "z": "ddd4d9eb36b5b0f8",
        "name": "CreateConnectionError",
        "func": "msg.payload = {\n    \"error\": \"No connection to the database could be detected!\"\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2510,
        "y": 1780,
        "wires": [
            [
                "4aad95437c3c7227"
            ]
        ]
    },
    {
        "id": "4aad95437c3c7227",
        "type": "http response",
        "z": "ddd4d9eb36b5b0f8",
        "name": "",
        "statusCode": "400",
        "headers": {},
        "x": 2760,
        "y": 1780,
        "wires": []
    },
    {
        "id": "f3086f520eb225f7",
        "type": "function",
        "z": "ddd4d9eb36b5b0f8",
        "name": "CreateUnknownProviderError",
        "func": "msg.payload = {\n    \"error\": \"An unknown database management system was detected!\"\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2530,
        "y": 1840,
        "wires": [
            [
                "2c01edfc890a533a"
            ]
        ]
    },
    {
        "id": "2c01edfc890a533a",
        "type": "http response",
        "z": "ddd4d9eb36b5b0f8",
        "name": "",
        "statusCode": "400",
        "headers": {},
        "x": 2760,
        "y": 1840,
        "wires": []
    },
    {
        "id": "d1e7c8967fd50eb7",
        "type": "switch",
        "z": "ddd4d9eb36b5b0f8",
        "name": "SwitchDbProvider",
        "property": "dbProvider",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "postgres",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "mssql",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 1830,
        "y": 240,
        "wires": [
            [
                "729c1a5723a1adc3"
            ],
            [
                "a3680c27ba3591e5"
            ],
            [
                "739306be098c7205"
            ]
        ]
    },
    {
        "id": "739306be098c7205",
        "type": "function",
        "z": "ddd4d9eb36b5b0f8",
        "name": "CreateUnknownProviderError",
        "func": "msg.payload = {\n    \"error\": \"An unknown database management system was detected!\"\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2150,
        "y": 300,
        "wires": [
            [
                "b66726b3e97a1c25"
            ]
        ]
    },
    {
        "id": "b66726b3e97a1c25",
        "type": "http response",
        "z": "ddd4d9eb36b5b0f8",
        "name": "",
        "statusCode": "400",
        "headers": {},
        "x": 2380,
        "y": 300,
        "wires": []
    },
    {
        "id": "d64a4303c81445a4",
        "type": "switch",
        "z": "ddd4d9eb36b5b0f8",
        "name": "SwitchDbProvider",
        "property": "dbProvider",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "postgres",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "mssql",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 1310,
        "y": 760,
        "wires": [
            [
                "5d17b14b20248354"
            ],
            [
                "67175b0c021cc8f0"
            ],
            [
                "fd58b43a3d941ef7"
            ]
        ]
    },
    {
        "id": "66acf1bc9413d547",
        "type": "subflow:02aa7986ab49c73f",
        "z": "ddd4d9eb36b5b0f8",
        "name": "",
        "x": 1560,
        "y": 1140,
        "wires": [
            [
                "7025c9a66108635a"
            ],
            [
                "cab005a332a006ce"
            ]
        ]
    }
]